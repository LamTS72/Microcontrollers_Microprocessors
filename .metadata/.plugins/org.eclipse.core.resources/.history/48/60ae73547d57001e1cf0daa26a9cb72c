/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "software_timer.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Ex_Init(){
	HAL_GPIO_WritePin(GPIOA, PA1_Pin|PA2_Pin|PA3_Pin| PA4_Pin|PA5_Pin| PA6_Pin, SET);

}

const int MAX_LED_MATRIX = 8;
int index_led_matrix = 0;
uint8_t matrix_buffer[8] = {0x01, 0x06, 0x38, 0xC8, 0xC8, 0x38, 0x06, 0x01};
uint16_t row_pin[8] = {PB8_Pin,PB9_Pin,PB10_Pin,PB11_Pin,PB12_Pin,PB13_Pin,PB14_Pin,PB15_Pin };
uint16_t col_pin[8] = {PA8_Pin,PA9_Pin,PA10_Pin,PA11_Pin,PA12_Pin,PA13_Pin,PA14_Pin,PA15_Pin};

void updateLEDMatrix(int index) {
	HAL_GPIO_WritePin(ROW_PORT, PB8_Pin|PB9_Pin|PB10_Pin|PB11_Pin|PB12_Pin|PB13_Pin|PB14_Pin|PB15_Pin, SET);
	HAL_GPIO_WritePin(ENM_PORT, ENM0|ENM1|ENM2|ENM3|ENM4|ENM5|ENM6|ENM7, 1);

	for(int i = 0; i < 8; i++) {
		if(matrix_buffer[index] & (0x80 >> i)) {
			HAL_GPIO_WritePin(ROW_PORT, row_pin[i], 0);
		}
	}

	HAL_GPIO_WritePin(ENM_PORT, col_pin[index], 0);
}


void display7SEG(int num){
  	uint8_t signal[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x12, 0x82, 0xF8, 0x80, 0x90};
  	for(int i = 0; i < 7; i++ ){
  		HAL_GPIO_WritePin(PB0_GPIO_Port, PB0_Pin << i, (signal[num] >> i) & 0x01);
  	}
}
void clearAll(){
	HAL_GPIO_WritePin(GPIOB, PB0_Pin |PB1_Pin|PB2_Pin|PB3_Pin|PB4_Pin|
			PB5_Pin|PB6_Pin,SET);
}

const int MAX_LED = 4;
int index_led = 0;
int led_buffer[4];
void update7SEG ( int index ){
	switch(index){
	case 0:
		HAL_GPIO_WritePin(PA3_GPIO_Port, PA3_Pin, RESET);
		HAL_GPIO_WritePin(PA4_GPIO_Port, PA4_Pin, SET);
		HAL_GPIO_WritePin(PA5_GPIO_Port, PA5_Pin, SET);
		HAL_GPIO_WritePin(PA6_GPIO_Port, PA6_Pin, SET);
		display7SEG(led_buffer[index]);
		break;
	case 1:
		HAL_GPIO_WritePin(PA3_GPIO_Port, PA3_Pin, SET);
		HAL_GPIO_WritePin(PA4_GPIO_Port, PA4_Pin, RESET);
		HAL_GPIO_WritePin(PA5_GPIO_Port, PA5_Pin, SET);
		HAL_GPIO_WritePin(PA6_GPIO_Port, PA6_Pin, SET);
		display7SEG(led_buffer[index]);
		break;
	case 2:
		HAL_GPIO_WritePin(PA3_GPIO_Port, PA3_Pin, SET);
		HAL_GPIO_WritePin(PA4_GPIO_Port, PA4_Pin, SET);
		HAL_GPIO_WritePin(PA5_GPIO_Port, PA5_Pin, RESET);
		HAL_GPIO_WritePin(PA6_GPIO_Port, PA6_Pin, SET);
		display7SEG(led_buffer[index]);
		break;
	default:
		HAL_GPIO_WritePin(PA3_GPIO_Port, PA3_Pin, SET);
		HAL_GPIO_WritePin(PA4_GPIO_Port, PA4_Pin, SET);
		HAL_GPIO_WritePin(PA5_GPIO_Port, PA5_Pin, SET);
		HAL_GPIO_WritePin(PA6_GPIO_Port, PA6_Pin, RESET);
		display7SEG(led_buffer[index]);
		break;
	}
}
void updateClockBuffer(int hours, int minutes){
	led_buffer[0] = (hours > 9)? hours/10 : 0;
	led_buffer[1] = hours%10;
	led_buffer[2] = (minutes > 9)? minutes/10 : 0;
	led_buffer[3] = minutes%10;
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer0(10);
  setTimer1(15);
  setTimer2(15);
  int hour = 15 , minute = 8 , second = 50;
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(timer0_flag == 1){
		  if(second >= 60){
			  second = 0;
			  minute++;
		  }
		  if(minute >= 60){
			  minute = 0;
			  hour++;
		  }
		  if(hour >= 24){
			  hour = 0;
		  }
		  second++;
		  updateClockBuffer(hour, minute);
		  setTimer0(100);
	  }
	  if(timer2_flag == 1){
		  update7SEG(index_led);
		  if(index_led >= 3){
			  index_led = 0;
		  }
		  else{
			 index_led++;
		  }
		  setTimer2(50);
	  }

	  if(timer1_flag == 1){
		  HAL_GPIO_TogglePin(PA1_GPIO_Port, PA1_Pin);
		  HAL_GPIO_TogglePin(PA2_GPIO_Port, PA2_Pin);
		  setTimer1(100);
	  }
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 7999;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 9;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA1_Pin|PA2_Pin|PA3_Pin|PA4_Pin
                          |PA5_Pin|PA6_Pin|PA7_Pin|PA8_Pin
                          |PA9_Pin|PA10_Pin|PA11_Pin|PA12_Pin
                          |PA13_Pin|PA14_Pin|PA15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PB0_Pin|PB1_Pin|PB2_Pin|PB10_Pin
                          |PB11_Pin|PB12_Pin|PB13_Pin|PB14_Pin
                          |PB15_Pin|PB3_Pin|PB4_Pin|PB5_Pin
                          |PB6_Pin|PB7_Pin|PB8_Pin|PB9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1_Pin PA2_Pin PA3_Pin PA4_Pin
                           PA5_Pin PA6_Pin PA7_Pin PA8_Pin
                           PA9_Pin PA10_Pin PA11_Pin PA12_Pin
                           PA13_Pin PA14_Pin PA15_Pin */
  GPIO_InitStruct.Pin = PA1_Pin|PA2_Pin|PA3_Pin|PA4_Pin
                          |PA5_Pin|PA6_Pin|PA7_Pin|PA8_Pin
                          |PA9_Pin|PA10_Pin|PA11_Pin|PA12_Pin
                          |PA13_Pin|PA14_Pin|PA15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0_Pin PB1_Pin PB2_Pin PB10_Pin
                           PB11_Pin PB12_Pin PB13_Pin PB14_Pin
                           PB15_Pin PB3_Pin PB4_Pin PB5_Pin
                           PB6_Pin PB7_Pin PB8_Pin PB9_Pin */
  GPIO_InitStruct.Pin = PB0_Pin|PB1_Pin|PB2_Pin|PB10_Pin
                          |PB11_Pin|PB12_Pin|PB13_Pin|PB14_Pin
                          |PB15_Pin|PB3_Pin|PB4_Pin|PB5_Pin
                          |PB6_Pin|PB7_Pin|PB8_Pin|PB9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim ){
	timerRun();
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
