/*
 * scheduler.c
 *
 *  Created on: Nov 6, 2023
 *      Author: Windows
 */


#include "main.h"
#include "scheduler.h"

typedef struct {
	// Pointer to the task (must be a ’ void ( void ) ’ function )
	void (*pTask)(void);
	// Delay (ticks) until the function will ( next ) be run
	uint32_t Delay;
	// Interval (ticks) between subsequent runs .
	uint32_t Period;
	// Incremented ( by scheduler ) when task i s due to execute
	uint8_t RunMe;
	// This i s a hint to solve the question below .
	uint32_t TaskID;
} sTask;

//initialize array task with 30 elements
#define SCH_MAX_TASKS 30
#define NO_TASK_ID 0
sTask SCH_tasks_G[SCH_MAX_TASKS];

unsigned char Error_code_G = 0;
int numberOfTask = 0;

void SCH_Init(void) {
	Error_code_G = 0;
}



uint32_t SCH_Add_Task(void (*pFunction)(), unsigned int DELAY,
		unsigned int PERIOD) {
	if (numberOfTask == SCH_MAX_TASKS)
		return 0; //full

	unsigned char pivot = 0;

	while (1) {
		if (pivot == numberOfTask)
			break;
		if (DELAY < SCH_tasks_G[pivot].Delay)
			break;
		DELAY -= SCH_tasks_G[pivot].Delay;
		pivot++;
	}
	for (int i = numberOfTask; i > pivot; i--) {
		SCH_tasks_G[i] = SCH_tasks_G[i - 1];
	}
	if(pivot != numberOfTask)
		SCH_tasks_G[pivot+1].Delay -= DELAY;	//update delay for elements after pivot

	SCH_tasks_G[pivot].pTask = pFunction;
	SCH_tasks_G[pivot].Delay = DELAY;
	SCH_tasks_G[pivot].Period = PERIOD;
	SCH_tasks_G[pivot].RunMe = 0;
	numberOfTask++;
	return pivot;

}

void SCH_Update(void) {
	if(number_task == 0) return; //empty

	unsigned char head = 0;

	if (SCH_tasks_G[head].pTask) {
		if (SCH_tasks_G[head].Delay == 0) {
			SCH_tasks_G[head].RunMe += 1;
		} else {
			SCH_tasks_G[head].Delay -= 1;
		}
	}

}

uint8_t SCH_Delete_Task(uint32_t taskID) {
	//unsigned char Return_code ;
	if (numberOfTask == 0)
		return 0;
	for (int i = 0; i < numberOfTask - 1; i++) {
		SCH_tasks_G[i] = SCH_tasks_G[i + 1];
	}
	numberOfTask--;
	SCH_tasks_G[numberOfTask].pTask = 0x0000;
	SCH_tasks_G[numberOfTask].Delay = 0;
	SCH_tasks_G[numberOfTask].Period = 0;
	SCH_tasks_G[numberOfTask].RunMe = 0;
	//return Return_code; // return status
	return 0;
}

void SCH_Dispatch_Tasks(void) {
	unsigned char Index = 0;
	// Dispatches ( runs ) the next task ( if one is ready )
	//for (Index = 0; Index < SCH_MAX_TASKS; Index++) {
	if (SCH_tasks_G[Index].RunMe > 0) {
		(*SCH_tasks_G[Index].pTask)(); // Run the task
		SCH_tasks_G[Index].RunMe -= 1; // Reset / reduce RunMe flag
		// Periodic tasks w ill automatically run again if this is a ’one shot’ task , remove it from the array
		if (SCH_tasks_G[Index].Period == 0) {
			SCH_Delete_Task(Index);
		} else {
			sTask temp = SCH_tasks_G[Index];
			SCH_Delete_Task(Index);
			SCH_Add_Task(temp.pTask, temp.Period, temp.Period);
		}
	}

}
