
MCU_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002d88  08002d88  00012d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002db8  08002db8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002db8  08002db8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002db8  08002db8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002db8  08002db8  00012db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dbc  08002dbc  00012dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000078  08002e38  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08002e38  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e8d  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae8  00000000  00000000  00028f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002aa18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002b480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ae4  00000000  00000000  0002bdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4f6  00000000  00000000  000428d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823ae  00000000  00000000  0004ddca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0178  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002958  00000000  00000000  000d01c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d70 	.word	0x08002d70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08002d70 	.word	0x08002d70

0800014c <isMODE_Pressed>:
int INC_flag = 0;
int SET_flag = 0;

int TimerForKeyPress[3] = {200, 200, 200};

int isMODE_Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(MODE_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isMODE_Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isMODE_Pressed+0x16>
		MODE_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isMODE_Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isMODE_Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000094 	.word	0x20000094

08000170 <isINC_Pressed>:

int isINC_Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(INC_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isINC_Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isINC_Pressed+0x16>
		INC_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isINC_Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isINC_Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000098 	.word	0x20000098

08000194 <isSET_Pressed>:
int isSET_Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(SET_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isSET_Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isSET_Pressed+0x16>
		SET_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isSET_Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isSET_Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	2000009c 	.word	0x2000009c

080001b8 <subKeyProcess>:

void subKeyProcess(int i){
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	if( i == 0){
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d102      	bne.n	80001cc <subKeyProcess+0x14>
		MODE_flag = 1;
 80001c6:	4b0a      	ldr	r3, [pc, #40]	; (80001f0 <subKeyProcess+0x38>)
 80001c8:	2201      	movs	r2, #1
 80001ca:	601a      	str	r2, [r3, #0]
	}
	if(i == 1){
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b01      	cmp	r3, #1
 80001d0:	d102      	bne.n	80001d8 <subKeyProcess+0x20>
		INC_flag = 1;
 80001d2:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <subKeyProcess+0x3c>)
 80001d4:	2201      	movs	r2, #1
 80001d6:	601a      	str	r2, [r3, #0]
	}
	if(i == 2){
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	2b02      	cmp	r3, #2
 80001dc:	d102      	bne.n	80001e4 <subKeyProcess+0x2c>
		SET_flag = 1;
 80001de:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <subKeyProcess+0x40>)
 80001e0:	2201      	movs	r2, #1
 80001e2:	601a      	str	r2, [r3, #0]
	}
}
 80001e4:	bf00      	nop
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bc80      	pop	{r7}
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	20000094 	.word	0x20000094
 80001f4:	20000098 	.word	0x20000098
 80001f8:	2000009c 	.word	0x2000009c

080001fc <getKeyInput>:

void getKeyInput(){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
	for (int i=0; i<3; i++){
 8000202:	2300      	movs	r3, #0
 8000204:	607b      	str	r3, [r7, #4]
 8000206:	e070      	b.n	80002ea <getKeyInput+0xee>
			KeyReg0[i] = KeyReg1[i];
 8000208:	4a3c      	ldr	r2, [pc, #240]	; (80002fc <getKeyInput+0x100>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000210:	493b      	ldr	r1, [pc, #236]	; (8000300 <getKeyInput+0x104>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			KeyReg1[i] = KeyReg2[i];
 8000218:	4a3a      	ldr	r2, [pc, #232]	; (8000304 <getKeyInput+0x108>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000220:	4936      	ldr	r1, [pc, #216]	; (80002fc <getKeyInput+0x100>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			KeyReg2[i] = HAL_GPIO_ReadPin(GPIOA, (uint16_t)(0x01)<<(12+i));
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	330c      	adds	r3, #12
 800022c:	2201      	movs	r2, #1
 800022e:	fa02 f303 	lsl.w	r3, r2, r3
 8000232:	b29b      	uxth	r3, r3
 8000234:	4619      	mov	r1, r3
 8000236:	4834      	ldr	r0, [pc, #208]	; (8000308 <getKeyInput+0x10c>)
 8000238:	f001 fd60 	bl	8001cfc <HAL_GPIO_ReadPin>
 800023c:	4603      	mov	r3, r0
 800023e:	4619      	mov	r1, r3
 8000240:	4a30      	ldr	r2, [pc, #192]	; (8000304 <getKeyInput+0x108>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8000248:	4a2d      	ldr	r2, [pc, #180]	; (8000300 <getKeyInput+0x104>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000250:	492a      	ldr	r1, [pc, #168]	; (80002fc <getKeyInput+0x100>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000258:	429a      	cmp	r2, r3
 800025a:	d143      	bne.n	80002e4 <getKeyInput+0xe8>
 800025c:	4a27      	ldr	r2, [pc, #156]	; (80002fc <getKeyInput+0x100>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000264:	4927      	ldr	r1, [pc, #156]	; (8000304 <getKeyInput+0x108>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800026c:	429a      	cmp	r2, r3
 800026e:	d139      	bne.n	80002e4 <getKeyInput+0xe8>
				if (KeyReg3[i] != KeyReg2[i]){
 8000270:	4a26      	ldr	r2, [pc, #152]	; (800030c <getKeyInput+0x110>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000278:	4922      	ldr	r1, [pc, #136]	; (8000304 <getKeyInput+0x108>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000280:	429a      	cmp	r2, r3
 8000282:	d016      	beq.n	80002b2 <getKeyInput+0xb6>
					KeyReg3[i] = KeyReg2[i];
 8000284:	4a1f      	ldr	r2, [pc, #124]	; (8000304 <getKeyInput+0x108>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800028c:	491f      	ldr	r1, [pc, #124]	; (800030c <getKeyInput+0x110>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if (KeyReg2[i] == PRESSED_STATE){
 8000294:	4a1b      	ldr	r2, [pc, #108]	; (8000304 <getKeyInput+0x108>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d121      	bne.n	80002e4 <getKeyInput+0xe8>
						subKeyProcess(i);
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f7ff ff89 	bl	80001b8 <subKeyProcess>
						TimerForKeyPress[i] = 200;
 80002a6:	4a1a      	ldr	r2, [pc, #104]	; (8000310 <getKeyInput+0x114>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	21c8      	movs	r1, #200	; 0xc8
 80002ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002b0:	e018      	b.n	80002e4 <getKeyInput+0xe8>
					}
				}
				else{
					TimerForKeyPress[i]--;
 80002b2:	4a17      	ldr	r2, [pc, #92]	; (8000310 <getKeyInput+0x114>)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ba:	1e5a      	subs	r2, r3, #1
 80002bc:	4914      	ldr	r1, [pc, #80]	; (8000310 <getKeyInput+0x114>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if (TimerForKeyPress[i] == 0){
 80002c4:	4a12      	ldr	r2, [pc, #72]	; (8000310 <getKeyInput+0x114>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d109      	bne.n	80002e4 <getKeyInput+0xe8>
						KeyReg3[i] = NORMAL_STATE;
 80002d0:	4a0e      	ldr	r2, [pc, #56]	; (800030c <getKeyInput+0x110>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2101      	movs	r1, #1
 80002d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						TimerForKeyPress[i] = 200;
 80002da:	4a0d      	ldr	r2, [pc, #52]	; (8000310 <getKeyInput+0x114>)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	21c8      	movs	r1, #200	; 0xc8
 80002e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i<3; i++){
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	3301      	adds	r3, #1
 80002e8:	607b      	str	r3, [r7, #4]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2b02      	cmp	r3, #2
 80002ee:	dd8b      	ble.n	8000208 <getKeyInput+0xc>
					}
				}
			}
	}
}
 80002f0:	bf00      	nop
 80002f2:	bf00      	nop
 80002f4:	3708      	adds	r7, #8
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	2000000c 	.word	0x2000000c
 8000300:	20000000 	.word	0x20000000
 8000304:	20000018 	.word	0x20000018
 8000308:	40010800 	.word	0x40010800
 800030c:	20000024 	.word	0x20000024
 8000310:	20000030 	.word	0x20000030

08000314 <fsm_mode_run>:
 */

#include "fsm.h"

int state = 0;
void fsm_mode_run(){
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	switch(state){
 8000318:	4b74      	ldr	r3, [pc, #464]	; (80004ec <fsm_mode_run+0x1d8>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2b04      	cmp	r3, #4
 800031e:	f200 80e3 	bhi.w	80004e8 <fsm_mode_run+0x1d4>
 8000322:	a201      	add	r2, pc, #4	; (adr r2, 8000328 <fsm_mode_run+0x14>)
 8000324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000328:	0800033d 	.word	0x0800033d
 800032c:	0800034b 	.word	0x0800034b
 8000330:	08000377 	.word	0x08000377
 8000334:	080003ef 	.word	0x080003ef
 8000338:	08000465 	.word	0x08000465
	case 0:
		state = MODE_1;
 800033c:	4b6b      	ldr	r3, [pc, #428]	; (80004ec <fsm_mode_run+0x1d8>)
 800033e:	2201      	movs	r2, #1
 8000340:	601a      	str	r2, [r3, #0]
		setTimer0(10);
 8000342:	200a      	movs	r0, #10
 8000344:	f000 fb38 	bl	80009b8 <setTimer0>
		break;
 8000348:	e0ce      	b.n	80004e8 <fsm_mode_run+0x1d4>
	case MODE_1:
		traffic_light_horizontal();
 800034a:	f000 fcdd 	bl	8000d08 <traffic_light_horizontal>
		traffic_light_vertical();
 800034e:	f000 fe2d 	bl	8000fac <traffic_light_vertical>
		traffic_led7seg();
 8000352:	f000 ff7d 	bl	8001250 <traffic_led7seg>
		if(isMODE_Pressed() == 1){
 8000356:	f7ff fef9 	bl	800014c <isMODE_Pressed>
 800035a:	4603      	mov	r3, r0
 800035c:	2b01      	cmp	r3, #1
 800035e:	f040 80bc 	bne.w	80004da <fsm_mode_run+0x1c6>
			state = MODE_2;
 8000362:	4b62      	ldr	r3, [pc, #392]	; (80004ec <fsm_mode_run+0x1d8>)
 8000364:	2202      	movs	r2, #2
 8000366:	601a      	str	r2, [r3, #0]
			timer6_flag = 1;
 8000368:	4b61      	ldr	r3, [pc, #388]	; (80004f0 <fsm_mode_run+0x1dc>)
 800036a:	2201      	movs	r2, #1
 800036c:	601a      	str	r2, [r3, #0]
			setTimer0(100);
 800036e:	2064      	movs	r0, #100	; 0x64
 8000370:	f000 fb22 	bl	80009b8 <setTimer0>
		}
		break;
 8000374:	e0b1      	b.n	80004da <fsm_mode_run+0x1c6>
	case MODE_2:
		traffic_light_horizontal();
 8000376:	f000 fcc7 	bl	8000d08 <traffic_light_horizontal>
		traffic_light_vertical();
 800037a:	f000 fe17 	bl	8000fac <traffic_light_vertical>
		traffic_led7seg();
 800037e:	f000 ff67 	bl	8001250 <traffic_led7seg>
		if(isMODE_Pressed() == 1){
 8000382:	f7ff fee3 	bl	800014c <isMODE_Pressed>
 8000386:	4603      	mov	r3, r0
 8000388:	2b01      	cmp	r3, #1
 800038a:	d105      	bne.n	8000398 <fsm_mode_run+0x84>
			state = MODE_3;
 800038c:	4b57      	ldr	r3, [pc, #348]	; (80004ec <fsm_mode_run+0x1d8>)
 800038e:	2203      	movs	r2, #3
 8000390:	601a      	str	r2, [r3, #0]
			setTimer0(100);
 8000392:	2064      	movs	r0, #100	; 0x64
 8000394:	f000 fb10 	bl	80009b8 <setTimer0>
		}
		if(isINC_Pressed() == 1){
 8000398:	f7ff feea 	bl	8000170 <isINC_Pressed>
 800039c:	4603      	mov	r3, r0
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d10c      	bne.n	80003bc <fsm_mode_run+0xa8>
			if(red_change < 99){
 80003a2:	4b54      	ldr	r3, [pc, #336]	; (80004f4 <fsm_mode_run+0x1e0>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b62      	cmp	r3, #98	; 0x62
 80003a8:	dc05      	bgt.n	80003b6 <fsm_mode_run+0xa2>
				red_change++;
 80003aa:	4b52      	ldr	r3, [pc, #328]	; (80004f4 <fsm_mode_run+0x1e0>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	3301      	adds	r3, #1
 80003b0:	4a50      	ldr	r2, [pc, #320]	; (80004f4 <fsm_mode_run+0x1e0>)
 80003b2:	6013      	str	r3, [r2, #0]
 80003b4:	e002      	b.n	80003bc <fsm_mode_run+0xa8>
			}
			else{
				red_change = 0;
 80003b6:	4b4f      	ldr	r3, [pc, #316]	; (80004f4 <fsm_mode_run+0x1e0>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
			}
		}
		if(isSET_Pressed() == 1){
 80003bc:	f7ff feea 	bl	8000194 <isSET_Pressed>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	f040 808b 	bne.w	80004de <fsm_mode_run+0x1ca>
			red_counter = red_change;
 80003c8:	4b4a      	ldr	r3, [pc, #296]	; (80004f4 <fsm_mode_run+0x1e0>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a4a      	ldr	r2, [pc, #296]	; (80004f8 <fsm_mode_run+0x1e4>)
 80003ce:	6013      	str	r3, [r2, #0]
			led_hred = red_counter;
 80003d0:	4b49      	ldr	r3, [pc, #292]	; (80004f8 <fsm_mode_run+0x1e4>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a49      	ldr	r2, [pc, #292]	; (80004fc <fsm_mode_run+0x1e8>)
 80003d6:	6013      	str	r3, [r2, #0]
			led_vred = red_counter;
 80003d8:	4b47      	ldr	r3, [pc, #284]	; (80004f8 <fsm_mode_run+0x1e4>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a48      	ldr	r2, [pc, #288]	; (8000500 <fsm_mode_run+0x1ec>)
 80003de:	6013      	str	r3, [r2, #0]
			state = MODE_1;
 80003e0:	4b42      	ldr	r3, [pc, #264]	; (80004ec <fsm_mode_run+0x1d8>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	601a      	str	r2, [r3, #0]
			setTimer0(10);
 80003e6:	200a      	movs	r0, #10
 80003e8:	f000 fae6 	bl	80009b8 <setTimer0>
		}
		break;
 80003ec:	e077      	b.n	80004de <fsm_mode_run+0x1ca>
	case MODE_3:
		traffic_light_horizontal();
 80003ee:	f000 fc8b 	bl	8000d08 <traffic_light_horizontal>
		traffic_light_vertical();
 80003f2:	f000 fddb 	bl	8000fac <traffic_light_vertical>
		traffic_led7seg();
 80003f6:	f000 ff2b 	bl	8001250 <traffic_led7seg>
		if(isMODE_Pressed() == 1){
 80003fa:	f7ff fea7 	bl	800014c <isMODE_Pressed>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b01      	cmp	r3, #1
 8000402:	d105      	bne.n	8000410 <fsm_mode_run+0xfc>
			state = MODE_4;
 8000404:	4b39      	ldr	r3, [pc, #228]	; (80004ec <fsm_mode_run+0x1d8>)
 8000406:	2204      	movs	r2, #4
 8000408:	601a      	str	r2, [r3, #0]
			setTimer0(100);
 800040a:	2064      	movs	r0, #100	; 0x64
 800040c:	f000 fad4 	bl	80009b8 <setTimer0>
		}
		if(isINC_Pressed() == 1){
 8000410:	f7ff feae 	bl	8000170 <isINC_Pressed>
 8000414:	4603      	mov	r3, r0
 8000416:	2b01      	cmp	r3, #1
 8000418:	d10c      	bne.n	8000434 <fsm_mode_run+0x120>
			if(yellow_change < 99){
 800041a:	4b3a      	ldr	r3, [pc, #232]	; (8000504 <fsm_mode_run+0x1f0>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	2b62      	cmp	r3, #98	; 0x62
 8000420:	dc05      	bgt.n	800042e <fsm_mode_run+0x11a>
				yellow_change++;
 8000422:	4b38      	ldr	r3, [pc, #224]	; (8000504 <fsm_mode_run+0x1f0>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	3301      	adds	r3, #1
 8000428:	4a36      	ldr	r2, [pc, #216]	; (8000504 <fsm_mode_run+0x1f0>)
 800042a:	6013      	str	r3, [r2, #0]
 800042c:	e002      	b.n	8000434 <fsm_mode_run+0x120>
			}
			else{
				yellow_change = 0;
 800042e:	4b35      	ldr	r3, [pc, #212]	; (8000504 <fsm_mode_run+0x1f0>)
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
			}
		}
		if(isSET_Pressed() == 1){
 8000434:	f7ff feae 	bl	8000194 <isSET_Pressed>
 8000438:	4603      	mov	r3, r0
 800043a:	2b01      	cmp	r3, #1
 800043c:	d151      	bne.n	80004e2 <fsm_mode_run+0x1ce>
			yellow_counter = yellow_change;
 800043e:	4b31      	ldr	r3, [pc, #196]	; (8000504 <fsm_mode_run+0x1f0>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a31      	ldr	r2, [pc, #196]	; (8000508 <fsm_mode_run+0x1f4>)
 8000444:	6013      	str	r3, [r2, #0]
			led_hyellow = yellow_counter;
 8000446:	4b30      	ldr	r3, [pc, #192]	; (8000508 <fsm_mode_run+0x1f4>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a30      	ldr	r2, [pc, #192]	; (800050c <fsm_mode_run+0x1f8>)
 800044c:	6013      	str	r3, [r2, #0]
			led_vyellow = yellow_counter;
 800044e:	4b2e      	ldr	r3, [pc, #184]	; (8000508 <fsm_mode_run+0x1f4>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a2f      	ldr	r2, [pc, #188]	; (8000510 <fsm_mode_run+0x1fc>)
 8000454:	6013      	str	r3, [r2, #0]
			state = MODE_1;
 8000456:	4b25      	ldr	r3, [pc, #148]	; (80004ec <fsm_mode_run+0x1d8>)
 8000458:	2201      	movs	r2, #1
 800045a:	601a      	str	r2, [r3, #0]
			setTimer0(10);
 800045c:	200a      	movs	r0, #10
 800045e:	f000 faab 	bl	80009b8 <setTimer0>
		}
		break;
 8000462:	e03e      	b.n	80004e2 <fsm_mode_run+0x1ce>
	case MODE_4:
		traffic_light_horizontal();
 8000464:	f000 fc50 	bl	8000d08 <traffic_light_horizontal>
		traffic_light_vertical();
 8000468:	f000 fda0 	bl	8000fac <traffic_light_vertical>
		traffic_led7seg();
 800046c:	f000 fef0 	bl	8001250 <traffic_led7seg>
		if(isMODE_Pressed() == 1){
 8000470:	f7ff fe6c 	bl	800014c <isMODE_Pressed>
 8000474:	4603      	mov	r3, r0
 8000476:	2b01      	cmp	r3, #1
 8000478:	d105      	bne.n	8000486 <fsm_mode_run+0x172>
			state = 1;
 800047a:	4b1c      	ldr	r3, [pc, #112]	; (80004ec <fsm_mode_run+0x1d8>)
 800047c:	2201      	movs	r2, #1
 800047e:	601a      	str	r2, [r3, #0]
			setTimer0(100);
 8000480:	2064      	movs	r0, #100	; 0x64
 8000482:	f000 fa99 	bl	80009b8 <setTimer0>
		}
		if(isINC_Pressed() == 1){
 8000486:	f7ff fe73 	bl	8000170 <isINC_Pressed>
 800048a:	4603      	mov	r3, r0
 800048c:	2b01      	cmp	r3, #1
 800048e:	d10c      	bne.n	80004aa <fsm_mode_run+0x196>
			if(green_change < 99){
 8000490:	4b20      	ldr	r3, [pc, #128]	; (8000514 <fsm_mode_run+0x200>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2b62      	cmp	r3, #98	; 0x62
 8000496:	dc05      	bgt.n	80004a4 <fsm_mode_run+0x190>
				green_change++;
 8000498:	4b1e      	ldr	r3, [pc, #120]	; (8000514 <fsm_mode_run+0x200>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	3301      	adds	r3, #1
 800049e:	4a1d      	ldr	r2, [pc, #116]	; (8000514 <fsm_mode_run+0x200>)
 80004a0:	6013      	str	r3, [r2, #0]
 80004a2:	e002      	b.n	80004aa <fsm_mode_run+0x196>
			}
			else{
				green_change = 0;
 80004a4:	4b1b      	ldr	r3, [pc, #108]	; (8000514 <fsm_mode_run+0x200>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
			}
		}
		if(isSET_Pressed() == 1){
 80004aa:	f7ff fe73 	bl	8000194 <isSET_Pressed>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d118      	bne.n	80004e6 <fsm_mode_run+0x1d2>
			green_counter = green_change;
 80004b4:	4b17      	ldr	r3, [pc, #92]	; (8000514 <fsm_mode_run+0x200>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a17      	ldr	r2, [pc, #92]	; (8000518 <fsm_mode_run+0x204>)
 80004ba:	6013      	str	r3, [r2, #0]
			led_hgreen = green_counter;
 80004bc:	4b16      	ldr	r3, [pc, #88]	; (8000518 <fsm_mode_run+0x204>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a16      	ldr	r2, [pc, #88]	; (800051c <fsm_mode_run+0x208>)
 80004c2:	6013      	str	r3, [r2, #0]
			led_vgreen = green_counter;
 80004c4:	4b14      	ldr	r3, [pc, #80]	; (8000518 <fsm_mode_run+0x204>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a15      	ldr	r2, [pc, #84]	; (8000520 <fsm_mode_run+0x20c>)
 80004ca:	6013      	str	r3, [r2, #0]
			state = MODE_1;
 80004cc:	4b07      	ldr	r3, [pc, #28]	; (80004ec <fsm_mode_run+0x1d8>)
 80004ce:	2201      	movs	r2, #1
 80004d0:	601a      	str	r2, [r3, #0]
			setTimer0(10);
 80004d2:	200a      	movs	r0, #10
 80004d4:	f000 fa70 	bl	80009b8 <setTimer0>
		}
		break;
 80004d8:	e005      	b.n	80004e6 <fsm_mode_run+0x1d2>
		break;
 80004da:	bf00      	nop
 80004dc:	e004      	b.n	80004e8 <fsm_mode_run+0x1d4>
		break;
 80004de:	bf00      	nop
 80004e0:	e002      	b.n	80004e8 <fsm_mode_run+0x1d4>
		break;
 80004e2:	bf00      	nop
 80004e4:	e000      	b.n	80004e8 <fsm_mode_run+0x1d4>
		break;
 80004e6:	bf00      	nop
	}
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	200000a0 	.word	0x200000a0
 80004f0:	20000134 	.word	0x20000134
 80004f4:	2000004c 	.word	0x2000004c
 80004f8:	20000040 	.word	0x20000040
 80004fc:	20000058 	.word	0x20000058
 8000500:	20000064 	.word	0x20000064
 8000504:	20000054 	.word	0x20000054
 8000508:	20000048 	.word	0x20000048
 800050c:	20000060 	.word	0x20000060
 8000510:	2000006c 	.word	0x2000006c
 8000514:	20000050 	.word	0x20000050
 8000518:	20000044 	.word	0x20000044
 800051c:	2000005c 	.word	0x2000005c
 8000520:	20000068 	.word	0x20000068

08000524 <display7SEG>:

int index_led = 0;

int led_buffer[4] = {0,0,0,0};

void display7SEG(int num){
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	uint8_t signal[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x12, 0x82, 0xF8, 0x80, 0x90};
 800052c:	4a14      	ldr	r2, [pc, #80]	; (8000580 <display7SEG+0x5c>)
 800052e:	f107 0308 	add.w	r3, r7, #8
 8000532:	ca07      	ldmia	r2, {r0, r1, r2}
 8000534:	c303      	stmia	r3!, {r0, r1}
 8000536:	801a      	strh	r2, [r3, #0]
  	for(int i = 0; i < 7; i++ ){
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	e018      	b.n	8000570 <display7SEG+0x4c>
  		HAL_GPIO_WritePin(GPIOB, PB0_Pin << i, (signal[num] >> i) & 0x01);
 800053e:	2201      	movs	r2, #1
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	fa02 f303 	lsl.w	r3, r2, r3
 8000546:	b299      	uxth	r1, r3
 8000548:	f107 0208 	add.w	r2, r7, #8
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4413      	add	r3, r2
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	461a      	mov	r2, r3
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	fa42 f303 	asr.w	r3, r2, r3
 800055a:	b2db      	uxtb	r3, r3
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	b2db      	uxtb	r3, r3
 8000562:	461a      	mov	r2, r3
 8000564:	4807      	ldr	r0, [pc, #28]	; (8000584 <display7SEG+0x60>)
 8000566:	f001 fbe0 	bl	8001d2a <HAL_GPIO_WritePin>
  	for(int i = 0; i < 7; i++ ){
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	3301      	adds	r3, #1
 800056e:	617b      	str	r3, [r7, #20]
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	2b06      	cmp	r3, #6
 8000574:	dde3      	ble.n	800053e <display7SEG+0x1a>
  	}
}
 8000576:	bf00      	nop
 8000578:	bf00      	nop
 800057a:	3718      	adds	r7, #24
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	08002d88 	.word	0x08002d88
 8000584:	40010c00 	.word	0x40010c00

08000588 <clearAll_7SEG>:
void clearAll_7SEG(){
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, PB0_Pin |PB1_Pin|PB2_Pin|PB3_Pin|PB4_Pin|PB5_Pin|PB6_Pin,SET);
 800058c:	2201      	movs	r2, #1
 800058e:	217f      	movs	r1, #127	; 0x7f
 8000590:	4802      	ldr	r0, [pc, #8]	; (800059c <clearAll_7SEG+0x14>)
 8000592:	f001 fbca 	bl	8001d2a <HAL_GPIO_WritePin>
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40010c00 	.word	0x40010c00

080005a0 <update7SEG>:
void update7SEG( int index){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	clearAll_7SEG();
 80005a8:	f7ff ffee 	bl	8000588 <clearAll_7SEG>
	HAL_GPIO_WritePin(GPIOA, PA7_Pin | PA8_Pin | PA9_Pin | PA10_Pin, SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 80005b2:	4822      	ldr	r0, [pc, #136]	; (800063c <update7SEG+0x9c>)
 80005b4:	f001 fbb9 	bl	8001d2a <HAL_GPIO_WritePin>
	switch(index){
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b03      	cmp	r3, #3
 80005bc:	d839      	bhi.n	8000632 <update7SEG+0x92>
 80005be:	a201      	add	r2, pc, #4	; (adr r2, 80005c4 <update7SEG+0x24>)
 80005c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c4:	080005d5 	.word	0x080005d5
 80005c8:	080005eb 	.word	0x080005eb
 80005cc:	08000603 	.word	0x08000603
 80005d0:	0800061b 	.word	0x0800061b
	case 0:
		HAL_GPIO_WritePin(PA7_GPIO_Port, PA7_Pin, RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2180      	movs	r1, #128	; 0x80
 80005d8:	4818      	ldr	r0, [pc, #96]	; (800063c <update7SEG+0x9c>)
 80005da:	f001 fba6 	bl	8001d2a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <update7SEG+0xa0>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff ff9e 	bl	8000524 <display7SEG>
		break;
 80005e8:	e023      	b.n	8000632 <update7SEG+0x92>
	case 1:
		HAL_GPIO_WritePin(PA8_GPIO_Port, PA8_Pin, RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f0:	4812      	ldr	r0, [pc, #72]	; (800063c <update7SEG+0x9c>)
 80005f2:	f001 fb9a 	bl	8001d2a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 80005f6:	4b12      	ldr	r3, [pc, #72]	; (8000640 <update7SEG+0xa0>)
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ff92 	bl	8000524 <display7SEG>
		break;
 8000600:	e017      	b.n	8000632 <update7SEG+0x92>
	case 2:
		HAL_GPIO_WritePin(PA9_GPIO_Port, PA9_Pin, RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000608:	480c      	ldr	r0, [pc, #48]	; (800063c <update7SEG+0x9c>)
 800060a:	f001 fb8e 	bl	8001d2a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <update7SEG+0xa0>)
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff ff86 	bl	8000524 <display7SEG>
		break;
 8000618:	e00b      	b.n	8000632 <update7SEG+0x92>
	case 3:
		HAL_GPIO_WritePin(PA10_GPIO_Port, PA10_Pin, RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000620:	4806      	ldr	r0, [pc, #24]	; (800063c <update7SEG+0x9c>)
 8000622:	f001 fb82 	bl	8001d2a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[3]);
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <update7SEG+0xa0>)
 8000628:	68db      	ldr	r3, [r3, #12]
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ff7a 	bl	8000524 <display7SEG>
		break;
 8000630:	bf00      	nop
	}
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40010800 	.word	0x40010800
 8000640:	200000a8 	.word	0x200000a8

08000644 <updateClockBuffer_vertical>:

void updateClockBuffer_vertical(int num){
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	led_buffer[0] = num/10;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4a0d      	ldr	r2, [pc, #52]	; (8000684 <updateClockBuffer_vertical+0x40>)
 8000650:	fb82 1203 	smull	r1, r2, r2, r3
 8000654:	1092      	asrs	r2, r2, #2
 8000656:	17db      	asrs	r3, r3, #31
 8000658:	1ad3      	subs	r3, r2, r3
 800065a:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <updateClockBuffer_vertical+0x44>)
 800065c:	6013      	str	r3, [r2, #0]
	led_buffer[1] = num%10;
 800065e:	6879      	ldr	r1, [r7, #4]
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <updateClockBuffer_vertical+0x40>)
 8000662:	fb83 2301 	smull	r2, r3, r3, r1
 8000666:	109a      	asrs	r2, r3, #2
 8000668:	17cb      	asrs	r3, r1, #31
 800066a:	1ad2      	subs	r2, r2, r3
 800066c:	4613      	mov	r3, r2
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	4413      	add	r3, r2
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	1aca      	subs	r2, r1, r3
 8000676:	4b04      	ldr	r3, [pc, #16]	; (8000688 <updateClockBuffer_vertical+0x44>)
 8000678:	605a      	str	r2, [r3, #4]

}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	66666667 	.word	0x66666667
 8000688:	200000a8 	.word	0x200000a8

0800068c <updateClockBuffer_horizontal>:
void updateClockBuffer_horizontal(int num){
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	led_buffer[2] = num/10;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4a0d      	ldr	r2, [pc, #52]	; (80006cc <updateClockBuffer_horizontal+0x40>)
 8000698:	fb82 1203 	smull	r1, r2, r2, r3
 800069c:	1092      	asrs	r2, r2, #2
 800069e:	17db      	asrs	r3, r3, #31
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <updateClockBuffer_horizontal+0x44>)
 80006a4:	6093      	str	r3, [r2, #8]
	led_buffer[3] = num%10;
 80006a6:	6879      	ldr	r1, [r7, #4]
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <updateClockBuffer_horizontal+0x40>)
 80006aa:	fb83 2301 	smull	r2, r3, r3, r1
 80006ae:	109a      	asrs	r2, r3, #2
 80006b0:	17cb      	asrs	r3, r1, #31
 80006b2:	1ad2      	subs	r2, r2, r3
 80006b4:	4613      	mov	r3, r2
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	4413      	add	r3, r2
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	1aca      	subs	r2, r1, r3
 80006be:	4b04      	ldr	r3, [pc, #16]	; (80006d0 <updateClockBuffer_horizontal+0x44>)
 80006c0:	60da      	str	r2, [r3, #12]
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	66666667 	.word	0x66666667
 80006d0:	200000a8 	.word	0x200000a8

080006d4 <led7seg_run>:

void led7seg_run(){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	if(timer3_flag == 1){
 80006d8:	4b21      	ldr	r3, [pc, #132]	; (8000760 <led7seg_run+0x8c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d13d      	bne.n	800075c <led7seg_run+0x88>
		switch(index_led){
 80006e0:	4b20      	ldr	r3, [pc, #128]	; (8000764 <led7seg_run+0x90>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d835      	bhi.n	8000754 <led7seg_run+0x80>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <led7seg_run+0x1c>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000701 	.word	0x08000701
 80006f4:	08000717 	.word	0x08000717
 80006f8:	0800072d 	.word	0x0800072d
 80006fc:	08000743 	.word	0x08000743
			case 0:
				update7SEG(index_led);
 8000700:	4b18      	ldr	r3, [pc, #96]	; (8000764 <led7seg_run+0x90>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff4b 	bl	80005a0 <update7SEG>
				index_led++;
 800070a:	4b16      	ldr	r3, [pc, #88]	; (8000764 <led7seg_run+0x90>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	3301      	adds	r3, #1
 8000710:	4a14      	ldr	r2, [pc, #80]	; (8000764 <led7seg_run+0x90>)
 8000712:	6013      	str	r3, [r2, #0]
				break;
 8000714:	e01f      	b.n	8000756 <led7seg_run+0x82>
			case 1:
				update7SEG(index_led);
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <led7seg_run+0x90>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff40 	bl	80005a0 <update7SEG>
				index_led++;
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <led7seg_run+0x90>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	4a0f      	ldr	r2, [pc, #60]	; (8000764 <led7seg_run+0x90>)
 8000728:	6013      	str	r3, [r2, #0]
				break;
 800072a:	e014      	b.n	8000756 <led7seg_run+0x82>
			case 2:
				update7SEG(index_led);
 800072c:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <led7seg_run+0x90>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff35 	bl	80005a0 <update7SEG>
				index_led++;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <led7seg_run+0x90>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	3301      	adds	r3, #1
 800073c:	4a09      	ldr	r2, [pc, #36]	; (8000764 <led7seg_run+0x90>)
 800073e:	6013      	str	r3, [r2, #0]
				break;
 8000740:	e009      	b.n	8000756 <led7seg_run+0x82>
			case 3:
				update7SEG(index_led);
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <led7seg_run+0x90>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff2a 	bl	80005a0 <update7SEG>
				index_led=0;
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <led7seg_run+0x90>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
				break;
 8000752:	e000      	b.n	8000756 <led7seg_run+0x82>
			default:
				break;
 8000754:	bf00      	nop
			}
		 setTimer3(20);
 8000756:	2014      	movs	r0, #20
 8000758:	f000 f97a 	bl	8000a50 <setTimer3>
	}

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	2000011c 	.word	0x2000011c
 8000764:	200000a4 	.word	0x200000a4

08000768 <Ex_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Ex_Init(){
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, PA1_Pin| PA2_Pin | PA3_Pin |PA4_Pin |
 800076c:	2201      	movs	r2, #1
 800076e:	217e      	movs	r1, #126	; 0x7e
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <Ex_Init+0x20>)
 8000772:	f001 fada 	bl	8001d2a <HAL_GPIO_WritePin>
						PA5_Pin | PA6_Pin, SET); // for control the led
	HAL_GPIO_WritePin(GPIOA, PA7_Pin | PA8_Pin | PA9_Pin |PA10_Pin , SET); //for control led7seg
 8000776:	2201      	movs	r2, #1
 8000778:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 800077c:	4802      	ldr	r0, [pc, #8]	; (8000788 <Ex_Init+0x20>)
 800077e:	f001 fad4 	bl	8001d2a <HAL_GPIO_WritePin>
}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40010800 	.word	0x40010800

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000790:	f000 ffc8 	bl	8001724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000794:	f000 f814 	bl	80007c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000798:	f000 f89a 	bl	80008d0 <MX_GPIO_Init>
  MX_TIM2_Init();
 800079c:	f000 f84c 	bl	8000838 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80007a0:	4806      	ldr	r0, [pc, #24]	; (80007bc <main+0x30>)
 80007a2:	f001 ff21 	bl	80025e8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Ex_Init();
 80007a6:	f7ff ffdf 	bl	8000768 <Ex_Init>
  setTimer0(10);
 80007aa:	200a      	movs	r0, #10
 80007ac:	f000 f904 	bl	80009b8 <setTimer0>
  setTimer3(1);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f000 f94d 	bl	8000a50 <setTimer3>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  fsm_mode_run();
 80007b6:	f7ff fdad 	bl	8000314 <fsm_mode_run>
 80007ba:	e7fc      	b.n	80007b6 <main+0x2a>
 80007bc:	200000b8 	.word	0x200000b8

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b090      	sub	sp, #64	; 0x40
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 0318 	add.w	r3, r7, #24
 80007ca:	2228      	movs	r2, #40	; 0x28
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f002 fac6 	bl	8002d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e2:	2302      	movs	r3, #2
 80007e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e6:	2301      	movs	r3, #1
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ea:	2310      	movs	r3, #16
 80007ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f2:	f107 0318 	add.w	r3, r7, #24
 80007f6:	4618      	mov	r0, r3
 80007f8:	f001 fac8 	bl	8001d8c <HAL_RCC_OscConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000802:	f000 f8d3 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000806:	230f      	movs	r3, #15
 8000808:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f001 fd36 	bl	8002290 <HAL_RCC_ClockConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800082a:	f000 f8bf 	bl	80009ac <Error_Handler>
  }
}
 800082e:	bf00      	nop
 8000830:	3740      	adds	r7, #64	; 0x40
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084c:	463b      	mov	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000854:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <MX_TIM2_Init+0x94>)
 8000856:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800085a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800085c:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_TIM2_Init+0x94>)
 800085e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000862:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000864:	4b19      	ldr	r3, [pc, #100]	; (80008cc <MX_TIM2_Init+0x94>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_TIM2_Init+0x94>)
 800086c:	2209      	movs	r2, #9
 800086e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000870:	4b16      	ldr	r3, [pc, #88]	; (80008cc <MX_TIM2_Init+0x94>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_TIM2_Init+0x94>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800087c:	4813      	ldr	r0, [pc, #76]	; (80008cc <MX_TIM2_Init+0x94>)
 800087e:	f001 fe63 	bl	8002548 <HAL_TIM_Base_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000888:	f000 f890 	bl	80009ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800088c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000890:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	4619      	mov	r1, r3
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <MX_TIM2_Init+0x94>)
 800089a:	f001 fff9 	bl	8002890 <HAL_TIM_ConfigClockSource>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008a4:	f000 f882 	bl	80009ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a8:	2300      	movs	r3, #0
 80008aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008b0:	463b      	mov	r3, r7
 80008b2:	4619      	mov	r1, r3
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_TIM2_Init+0x94>)
 80008b6:	f002 f9c5 	bl	8002c44 <HAL_TIMEx_MasterConfigSynchronization>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008c0:	f000 f874 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200000b8 	.word	0x200000b8

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e4:	4b28      	ldr	r3, [pc, #160]	; (8000988 <MX_GPIO_Init+0xb8>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a27      	ldr	r2, [pc, #156]	; (8000988 <MX_GPIO_Init+0xb8>)
 80008ea:	f043 0304 	orr.w	r3, r3, #4
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b25      	ldr	r3, [pc, #148]	; (8000988 <MX_GPIO_Init+0xb8>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f003 0304 	and.w	r3, r3, #4
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fc:	4b22      	ldr	r3, [pc, #136]	; (8000988 <MX_GPIO_Init+0xb8>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a21      	ldr	r2, [pc, #132]	; (8000988 <MX_GPIO_Init+0xb8>)
 8000902:	f043 0308 	orr.w	r3, r3, #8
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b1f      	ldr	r3, [pc, #124]	; (8000988 <MX_GPIO_Init+0xb8>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f003 0308 	and.w	r3, r3, #8
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA0_Pin|PA1_Pin|PA2_Pin|PA3_Pin
 8000914:	2200      	movs	r2, #0
 8000916:	f640 71ff 	movw	r1, #4095	; 0xfff
 800091a:	481c      	ldr	r0, [pc, #112]	; (800098c <MX_GPIO_Init+0xbc>)
 800091c:	f001 fa05 	bl	8001d2a <HAL_GPIO_WritePin>
                          |PA4_Pin|PA5_Pin|PA6_Pin|PA7_Pin
                          |PA8_Pin|PA9_Pin|PA10_Pin|PA11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PB0_Pin|PB1_Pin|PB2_Pin|PB3_Pin
 8000920:	2200      	movs	r2, #0
 8000922:	217f      	movs	r1, #127	; 0x7f
 8000924:	481a      	ldr	r0, [pc, #104]	; (8000990 <MX_GPIO_Init+0xc0>)
 8000926:	f001 fa00 	bl	8001d2a <HAL_GPIO_WritePin>
                          |PB4_Pin|PB5_Pin|PB6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0_Pin PA1_Pin PA2_Pin PA3_Pin
                           PA4_Pin PA5_Pin PA6_Pin PA7_Pin
                           PA8_Pin PA9_Pin PA10_Pin PA11_Pin */
  GPIO_InitStruct.Pin = PA0_Pin|PA1_Pin|PA2_Pin|PA3_Pin
 800092a:	f640 73ff 	movw	r3, #4095	; 0xfff
 800092e:	60bb      	str	r3, [r7, #8]
                          |PA4_Pin|PA5_Pin|PA6_Pin|PA7_Pin
                          |PA8_Pin|PA9_Pin|PA10_Pin|PA11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2302      	movs	r3, #2
 800093a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 0308 	add.w	r3, r7, #8
 8000940:	4619      	mov	r1, r3
 8000942:	4812      	ldr	r0, [pc, #72]	; (800098c <MX_GPIO_Init+0xbc>)
 8000944:	f001 f85e 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0_Pin PB1_Pin PB2_Pin PB3_Pin
                           PB4_Pin PB5_Pin PB6_Pin */
  GPIO_InitStruct.Pin = PB0_Pin|PB1_Pin|PB2_Pin|PB3_Pin
 8000948:	237f      	movs	r3, #127	; 0x7f
 800094a:	60bb      	str	r3, [r7, #8]
                          |PB4_Pin|PB5_Pin|PB6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2302      	movs	r3, #2
 8000956:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	4619      	mov	r1, r3
 800095e:	480c      	ldr	r0, [pc, #48]	; (8000990 <MX_GPIO_Init+0xc0>)
 8000960:	f001 f850 	bl	8001a04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA12_Pin PA13_Pin PA14_Pin */
  GPIO_InitStruct.Pin = PA12_Pin|PA13_Pin|PA14_Pin;
 8000964:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000968:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800096e:	2301      	movs	r3, #1
 8000970:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000972:	f107 0308 	add.w	r3, r7, #8
 8000976:	4619      	mov	r1, r3
 8000978:	4804      	ldr	r0, [pc, #16]	; (800098c <MX_GPIO_Init+0xbc>)
 800097a:	f001 f843 	bl	8001a04 <HAL_GPIO_Init>

}
 800097e:	bf00      	nop
 8000980:	3718      	adds	r7, #24
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40021000 	.word	0x40021000
 800098c:	40010800 	.word	0x40010800
 8000990:	40010c00 	.word	0x40010c00

08000994 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim ){
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	timerRun();
 800099c:	f000 f8a4 	bl	8000ae8 <timerRun>
	getKeyInput();
 80009a0:	f7ff fc2c 	bl	80001fc <getKeyInput>
}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <Error_Handler+0x8>
	...

080009b8 <setTimer0>:
int timer5_flag = 0;

int timer6_counter = 0;
int timer6_flag = 0;

void setTimer0(int duration){
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	timer0_counter = duration;
 80009c0:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <setTimer0+0x20>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 80009c6:	4b05      	ldr	r3, [pc, #20]	; (80009dc <setTimer0+0x24>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000100 	.word	0x20000100
 80009dc:	20000104 	.word	0x20000104

080009e0 <setTimer1>:

void setTimer1(int duration){
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <setTimer1+0x2c>)
 80009ec:	fb82 1203 	smull	r1, r2, r2, r3
 80009f0:	1092      	asrs	r2, r2, #2
 80009f2:	17db      	asrs	r3, r3, #31
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <setTimer1+0x30>)
 80009f8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <setTimer1+0x34>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	66666667 	.word	0x66666667
 8000a10:	20000108 	.word	0x20000108
 8000a14:	2000010c 	.word	0x2000010c

08000a18 <setTimer2>:


void setTimer2(int duration){
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <setTimer2+0x2c>)
 8000a24:	fb82 1203 	smull	r1, r2, r2, r3
 8000a28:	1092      	asrs	r2, r2, #2
 8000a2a:	17db      	asrs	r3, r3, #31
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	4a06      	ldr	r2, [pc, #24]	; (8000a48 <setTimer2+0x30>)
 8000a30:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <setTimer2+0x34>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	66666667 	.word	0x66666667
 8000a48:	20000110 	.word	0x20000110
 8000a4c:	20000114 	.word	0x20000114

08000a50 <setTimer3>:

//timer for led 7 segment
void setTimer3(int duration){
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8000a58:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <setTimer3+0x20>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000a5e:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <setTimer3+0x24>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000118 	.word	0x20000118
 8000a74:	2000011c 	.word	0x2000011c

08000a78 <setTimer4>:

void setTimer4(int duration){
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a08      	ldr	r2, [pc, #32]	; (8000aa4 <setTimer4+0x2c>)
 8000a84:	fb82 1203 	smull	r1, r2, r2, r3
 8000a88:	1092      	asrs	r2, r2, #2
 8000a8a:	17db      	asrs	r3, r3, #31
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <setTimer4+0x30>)
 8000a90:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <setTimer4+0x34>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	66666667 	.word	0x66666667
 8000aa8:	20000120 	.word	0x20000120
 8000aac:	20000124 	.word	0x20000124

08000ab0 <setTimer5>:

void setTimer5(int duration){
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a08      	ldr	r2, [pc, #32]	; (8000adc <setTimer5+0x2c>)
 8000abc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac0:	1092      	asrs	r2, r2, #2
 8000ac2:	17db      	asrs	r3, r3, #31
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	4a06      	ldr	r2, [pc, #24]	; (8000ae0 <setTimer5+0x30>)
 8000ac8:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <setTimer5+0x34>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	66666667 	.word	0x66666667
 8000ae0:	20000128 	.word	0x20000128
 8000ae4:	2000012c 	.word	0x2000012c

08000ae8 <timerRun>:
void setTimer6(int duration){
	timer6_counter = duration;
	timer6_flag = 0;
}

void timerRun(){
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
	if(timer0_counter > 0){
 8000aec:	4b39      	ldr	r3, [pc, #228]	; (8000bd4 <timerRun+0xec>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	dd0b      	ble.n	8000b0c <timerRun+0x24>
		timer0_counter--;
 8000af4:	4b37      	ldr	r3, [pc, #220]	; (8000bd4 <timerRun+0xec>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	3b01      	subs	r3, #1
 8000afa:	4a36      	ldr	r2, [pc, #216]	; (8000bd4 <timerRun+0xec>)
 8000afc:	6013      	str	r3, [r2, #0]
		if(timer0_counter <= 0){
 8000afe:	4b35      	ldr	r3, [pc, #212]	; (8000bd4 <timerRun+0xec>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	dc02      	bgt.n	8000b0c <timerRun+0x24>
			timer0_flag = 1;
 8000b06:	4b34      	ldr	r3, [pc, #208]	; (8000bd8 <timerRun+0xf0>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer1_counter > 0){
 8000b0c:	4b33      	ldr	r3, [pc, #204]	; (8000bdc <timerRun+0xf4>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	dd0b      	ble.n	8000b2c <timerRun+0x44>
		timer1_counter--;
 8000b14:	4b31      	ldr	r3, [pc, #196]	; (8000bdc <timerRun+0xf4>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	4a30      	ldr	r2, [pc, #192]	; (8000bdc <timerRun+0xf4>)
 8000b1c:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8000b1e:	4b2f      	ldr	r3, [pc, #188]	; (8000bdc <timerRun+0xf4>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	dc02      	bgt.n	8000b2c <timerRun+0x44>
			timer1_flag = 1;
 8000b26:	4b2e      	ldr	r3, [pc, #184]	; (8000be0 <timerRun+0xf8>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter > 0){
 8000b2c:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <timerRun+0xfc>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	dd0b      	ble.n	8000b4c <timerRun+0x64>
		timer2_counter--;
 8000b34:	4b2b      	ldr	r3, [pc, #172]	; (8000be4 <timerRun+0xfc>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	4a2a      	ldr	r2, [pc, #168]	; (8000be4 <timerRun+0xfc>)
 8000b3c:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8000b3e:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <timerRun+0xfc>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	dc02      	bgt.n	8000b4c <timerRun+0x64>
			timer2_flag = 1;
 8000b46:	4b28      	ldr	r3, [pc, #160]	; (8000be8 <timerRun+0x100>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter > 0){
 8000b4c:	4b27      	ldr	r3, [pc, #156]	; (8000bec <timerRun+0x104>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	dd0b      	ble.n	8000b6c <timerRun+0x84>
		timer3_counter--;
 8000b54:	4b25      	ldr	r3, [pc, #148]	; (8000bec <timerRun+0x104>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	4a24      	ldr	r2, [pc, #144]	; (8000bec <timerRun+0x104>)
 8000b5c:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8000b5e:	4b23      	ldr	r3, [pc, #140]	; (8000bec <timerRun+0x104>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	dc02      	bgt.n	8000b6c <timerRun+0x84>
			timer3_flag = 1;
 8000b66:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <timerRun+0x108>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter > 0){
 8000b6c:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <timerRun+0x10c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	dd0b      	ble.n	8000b8c <timerRun+0xa4>
		timer4_counter--;
 8000b74:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <timerRun+0x10c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	4a1e      	ldr	r2, [pc, #120]	; (8000bf4 <timerRun+0x10c>)
 8000b7c:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <timerRun+0x10c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	dc02      	bgt.n	8000b8c <timerRun+0xa4>
			timer4_flag = 1;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <timerRun+0x110>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer5_counter > 0){
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <timerRun+0x114>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	dd0b      	ble.n	8000bac <timerRun+0xc4>
		timer5_counter--;
 8000b94:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <timerRun+0x114>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	4a18      	ldr	r2, [pc, #96]	; (8000bfc <timerRun+0x114>)
 8000b9c:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0){
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <timerRun+0x114>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	dc02      	bgt.n	8000bac <timerRun+0xc4>
			timer5_flag = 1;
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <timerRun+0x118>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer6_counter > 0){
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <timerRun+0x11c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	dd0b      	ble.n	8000bcc <timerRun+0xe4>
		timer6_counter--;
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <timerRun+0x11c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	4a12      	ldr	r2, [pc, #72]	; (8000c04 <timerRun+0x11c>)
 8000bbc:	6013      	str	r3, [r2, #0]
		if(timer6_counter <= 0){
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <timerRun+0x11c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	dc02      	bgt.n	8000bcc <timerRun+0xe4>
			timer6_flag = 1;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <timerRun+0x120>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	601a      	str	r2, [r3, #0]
		}
	}

}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	20000100 	.word	0x20000100
 8000bd8:	20000104 	.word	0x20000104
 8000bdc:	20000108 	.word	0x20000108
 8000be0:	2000010c 	.word	0x2000010c
 8000be4:	20000110 	.word	0x20000110
 8000be8:	20000114 	.word	0x20000114
 8000bec:	20000118 	.word	0x20000118
 8000bf0:	2000011c 	.word	0x2000011c
 8000bf4:	20000120 	.word	0x20000120
 8000bf8:	20000124 	.word	0x20000124
 8000bfc:	20000128 	.word	0x20000128
 8000c00:	2000012c 	.word	0x2000012c
 8000c04:	20000130 	.word	0x20000130
 8000c08:	20000134 	.word	0x20000134

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <HAL_MspInit+0x40>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <HAL_MspInit+0x40>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6193      	str	r3, [r2, #24]
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <HAL_MspInit+0x40>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_MspInit+0x40>)
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <HAL_MspInit+0x40>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	61d3      	str	r3, [r2, #28]
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <HAL_MspInit+0x40>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	40021000 	.word	0x40021000

08000c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c60:	d113      	bne.n	8000c8a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <HAL_TIM_Base_MspInit+0x44>)
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <HAL_TIM_Base_MspInit+0x44>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	61d3      	str	r3, [r2, #28]
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <HAL_TIM_Base_MspInit+0x44>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	201c      	movs	r0, #28
 8000c80:	f000 fe89 	bl	8001996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c84:	201c      	movs	r0, #28
 8000c86:	f000 fea2 	bl	80019ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40021000 	.word	0x40021000

08000c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <NMI_Handler+0x4>

08000c9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <HardFault_Handler+0x4>

08000ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <MemManage_Handler+0x4>

08000caa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <BusFault_Handler+0x4>

08000cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <UsageFault_Handler+0x4>

08000cb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr

08000cc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr

08000cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr

08000cda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cde:	f000 fd67 	bl	80017b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <TIM2_IRQHandler+0x10>)
 8000cee:	f001 fcc7 	bl	8002680 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200000b8 	.word	0x200000b8

08000cfc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <traffic_light_horizontal>:

int light_hmode = 0;
int light_vmode = 0;
int led_hmode = 0;
int led_vmode = 0;
void traffic_light_horizontal(){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	switch (light_hmode){
 8000d0c:	4ba0      	ldr	r3, [pc, #640]	; (8000f90 <traffic_light_horizontal+0x288>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b06      	cmp	r3, #6
 8000d12:	f200 813a 	bhi.w	8000f8a <traffic_light_horizontal+0x282>
 8000d16:	a201      	add	r2, pc, #4	; (adr r2, 8000d1c <traffic_light_horizontal+0x14>)
 8000d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1c:	08000d39 	.word	0x08000d39
 8000d20:	08000d53 	.word	0x08000d53
 8000d24:	08000e13 	.word	0x08000e13
 8000d28:	08000db3 	.word	0x08000db3
 8000d2c:	08000e73 	.word	0x08000e73
 8000d30:	08000ed3 	.word	0x08000ed3
 8000d34:	08000f33 	.word	0x08000f33
	case 0:
		light_hmode = RED;
 8000d38:	4b95      	ldr	r3, [pc, #596]	; (8000f90 <traffic_light_horizontal+0x288>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	601a      	str	r2, [r3, #0]
		setTimer1(red_counter*1000);
 8000d3e:	4b95      	ldr	r3, [pc, #596]	; (8000f94 <traffic_light_horizontal+0x28c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d46:	fb02 f303 	mul.w	r3, r2, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fe48 	bl	80009e0 <setTimer1>
		break;
 8000d50:	e11b      	b.n	8000f8a <traffic_light_horizontal+0x282>
	case RED:
		HAL_GPIO_WritePin(PA1_GPIO_Port, PA1_Pin, RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2102      	movs	r1, #2
 8000d56:	4890      	ldr	r0, [pc, #576]	; (8000f98 <traffic_light_horizontal+0x290>)
 8000d58:	f000 ffe7 	bl	8001d2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA2_GPIO_Port, PA2_Pin, SET);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	2104      	movs	r1, #4
 8000d60:	488d      	ldr	r0, [pc, #564]	; (8000f98 <traffic_light_horizontal+0x290>)
 8000d62:	f000 ffe2 	bl	8001d2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA3_GPIO_Port, PA3_Pin, SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	2108      	movs	r1, #8
 8000d6a:	488b      	ldr	r0, [pc, #556]	; (8000f98 <traffic_light_horizontal+0x290>)
 8000d6c:	f000 ffdd 	bl	8001d2a <HAL_GPIO_WritePin>
		if(timer1_flag == 1){
 8000d70:	4b8a      	ldr	r3, [pc, #552]	; (8000f9c <traffic_light_horizontal+0x294>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d10b      	bne.n	8000d90 <traffic_light_horizontal+0x88>
			light_hmode = GREEN;
 8000d78:	4b85      	ldr	r3, [pc, #532]	; (8000f90 <traffic_light_horizontal+0x288>)
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	601a      	str	r2, [r3, #0]
			setTimer1(green_counter*1000);
 8000d7e:	4b88      	ldr	r3, [pc, #544]	; (8000fa0 <traffic_light_horizontal+0x298>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d86:	fb02 f303 	mul.w	r3, r2, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fe28 	bl	80009e0 <setTimer1>
		}
		if(state == MODE_2){
 8000d90:	4b84      	ldr	r3, [pc, #528]	; (8000fa4 <traffic_light_horizontal+0x29c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	f040 80ed 	bne.w	8000f74 <traffic_light_horizontal+0x26c>
			HAL_GPIO_WritePin(GPIOA, PA1_Pin |PA4_Pin | PA2_Pin| PA5_Pin|PA3_Pin | PA6_Pin , SET);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	217e      	movs	r1, #126	; 0x7e
 8000d9e:	487e      	ldr	r0, [pc, #504]	; (8000f98 <traffic_light_horizontal+0x290>)
 8000da0:	f000 ffc3 	bl	8001d2a <HAL_GPIO_WritePin>

			light_hmode = RED_BLINK;
 8000da4:	4b7a      	ldr	r3, [pc, #488]	; (8000f90 <traffic_light_horizontal+0x288>)
 8000da6:	2204      	movs	r2, #4
 8000da8:	601a      	str	r2, [r3, #0]
			setTimer1(25);
 8000daa:	2019      	movs	r0, #25
 8000dac:	f7ff fe18 	bl	80009e0 <setTimer1>
		}
		break;
 8000db0:	e0e0      	b.n	8000f74 <traffic_light_horizontal+0x26c>
	case GREEN:
		//horizontal
		HAL_GPIO_WritePin(PA1_GPIO_Port, PA1_Pin, SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	2102      	movs	r1, #2
 8000db6:	4878      	ldr	r0, [pc, #480]	; (8000f98 <traffic_light_horizontal+0x290>)
 8000db8:	f000 ffb7 	bl	8001d2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA2_GPIO_Port, PA2_Pin, SET);
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	2104      	movs	r1, #4
 8000dc0:	4875      	ldr	r0, [pc, #468]	; (8000f98 <traffic_light_horizontal+0x290>)
 8000dc2:	f000 ffb2 	bl	8001d2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA3_GPIO_Port, PA3_Pin, RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2108      	movs	r1, #8
 8000dca:	4873      	ldr	r0, [pc, #460]	; (8000f98 <traffic_light_horizontal+0x290>)
 8000dcc:	f000 ffad 	bl	8001d2a <HAL_GPIO_WritePin>
		if(timer1_flag == 1){
 8000dd0:	4b72      	ldr	r3, [pc, #456]	; (8000f9c <traffic_light_horizontal+0x294>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d10b      	bne.n	8000df0 <traffic_light_horizontal+0xe8>
			light_hmode = YELLOW;
 8000dd8:	4b6d      	ldr	r3, [pc, #436]	; (8000f90 <traffic_light_horizontal+0x288>)
 8000dda:	2202      	movs	r2, #2
 8000ddc:	601a      	str	r2, [r3, #0]
			setTimer1(yellow_counter*1000);
 8000dde:	4b72      	ldr	r3, [pc, #456]	; (8000fa8 <traffic_light_horizontal+0x2a0>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000de6:	fb02 f303 	mul.w	r3, r2, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fdf8 	bl	80009e0 <setTimer1>
		}
		if(state == MODE_2){
 8000df0:	4b6c      	ldr	r3, [pc, #432]	; (8000fa4 <traffic_light_horizontal+0x29c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	f040 80bf 	bne.w	8000f78 <traffic_light_horizontal+0x270>
			HAL_GPIO_WritePin(GPIOA, PA1_Pin |PA4_Pin | PA2_Pin| PA5_Pin|PA3_Pin | PA6_Pin , SET);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	217e      	movs	r1, #126	; 0x7e
 8000dfe:	4866      	ldr	r0, [pc, #408]	; (8000f98 <traffic_light_horizontal+0x290>)
 8000e00:	f000 ff93 	bl	8001d2a <HAL_GPIO_WritePin>

			light_hmode = RED_BLINK;
 8000e04:	4b62      	ldr	r3, [pc, #392]	; (8000f90 <traffic_light_horizontal+0x288>)
 8000e06:	2204      	movs	r2, #4
 8000e08:	601a      	str	r2, [r3, #0]
			setTimer1(25);
 8000e0a:	2019      	movs	r0, #25
 8000e0c:	f7ff fde8 	bl	80009e0 <setTimer1>
		}
		break;
 8000e10:	e0b2      	b.n	8000f78 <traffic_light_horizontal+0x270>
	case YELLOW:
		//horizontal
		HAL_GPIO_WritePin(PA1_GPIO_Port, PA1_Pin, SET);
 8000e12:	2201      	movs	r2, #1
 8000e14:	2102      	movs	r1, #2
 8000e16:	4860      	ldr	r0, [pc, #384]	; (8000f98 <traffic_light_horizontal+0x290>)
 8000e18:	f000 ff87 	bl	8001d2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA2_GPIO_Port, PA2_Pin, RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2104      	movs	r1, #4
 8000e20:	485d      	ldr	r0, [pc, #372]	; (8000f98 <traffic_light_horizontal+0x290>)
 8000e22:	f000 ff82 	bl	8001d2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA3_GPIO_Port, PA3_Pin, SET);
 8000e26:	2201      	movs	r2, #1
 8000e28:	2108      	movs	r1, #8
 8000e2a:	485b      	ldr	r0, [pc, #364]	; (8000f98 <traffic_light_horizontal+0x290>)
 8000e2c:	f000 ff7d 	bl	8001d2a <HAL_GPIO_WritePin>
		if(timer1_flag == 1){
 8000e30:	4b5a      	ldr	r3, [pc, #360]	; (8000f9c <traffic_light_horizontal+0x294>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d10b      	bne.n	8000e50 <traffic_light_horizontal+0x148>
			light_hmode = RED;
 8000e38:	4b55      	ldr	r3, [pc, #340]	; (8000f90 <traffic_light_horizontal+0x288>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	601a      	str	r2, [r3, #0]
			setTimer1(red_counter*1000);
 8000e3e:	4b55      	ldr	r3, [pc, #340]	; (8000f94 <traffic_light_horizontal+0x28c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e46:	fb02 f303 	mul.w	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fdc8 	bl	80009e0 <setTimer1>
		}
		if(state == MODE_2){
 8000e50:	4b54      	ldr	r3, [pc, #336]	; (8000fa4 <traffic_light_horizontal+0x29c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	f040 8091 	bne.w	8000f7c <traffic_light_horizontal+0x274>
			HAL_GPIO_WritePin(GPIOA, PA1_Pin |PA4_Pin | PA2_Pin| PA5_Pin|PA3_Pin | PA6_Pin , SET);
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	217e      	movs	r1, #126	; 0x7e
 8000e5e:	484e      	ldr	r0, [pc, #312]	; (8000f98 <traffic_light_horizontal+0x290>)
 8000e60:	f000 ff63 	bl	8001d2a <HAL_GPIO_WritePin>
			light_hmode = RED_BLINK;
 8000e64:	4b4a      	ldr	r3, [pc, #296]	; (8000f90 <traffic_light_horizontal+0x288>)
 8000e66:	2204      	movs	r2, #4
 8000e68:	601a      	str	r2, [r3, #0]
			setTimer1(25);
 8000e6a:	2019      	movs	r0, #25
 8000e6c:	f7ff fdb8 	bl	80009e0 <setTimer1>
		}
		break;
 8000e70:	e084      	b.n	8000f7c <traffic_light_horizontal+0x274>
	case RED_BLINK:
		if (timer1_flag == 1){
 8000e72:	4b4a      	ldr	r3, [pc, #296]	; (8000f9c <traffic_light_horizontal+0x294>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d106      	bne.n	8000e88 <traffic_light_horizontal+0x180>
			HAL_GPIO_TogglePin(GPIOA, PA1_Pin);
 8000e7a:	2102      	movs	r1, #2
 8000e7c:	4846      	ldr	r0, [pc, #280]	; (8000f98 <traffic_light_horizontal+0x290>)
 8000e7e:	f000 ff6c 	bl	8001d5a <HAL_GPIO_TogglePin>
			setTimer1(25);
 8000e82:	2019      	movs	r0, #25
 8000e84:	f7ff fdac 	bl	80009e0 <setTimer1>
		}
		if(state == MODE_3){
 8000e88:	4b46      	ldr	r3, [pc, #280]	; (8000fa4 <traffic_light_horizontal+0x29c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d10a      	bne.n	8000ea6 <traffic_light_horizontal+0x19e>
			HAL_GPIO_WritePin(GPIOA, PA1_Pin |PA4_Pin | PA2_Pin| PA5_Pin|PA3_Pin | PA6_Pin , SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	217e      	movs	r1, #126	; 0x7e
 8000e94:	4840      	ldr	r0, [pc, #256]	; (8000f98 <traffic_light_horizontal+0x290>)
 8000e96:	f000 ff48 	bl	8001d2a <HAL_GPIO_WritePin>
			light_hmode = YELLOW_BLINK;
 8000e9a:	4b3d      	ldr	r3, [pc, #244]	; (8000f90 <traffic_light_horizontal+0x288>)
 8000e9c:	2205      	movs	r2, #5
 8000e9e:	601a      	str	r2, [r3, #0]
			setTimer1(25);
 8000ea0:	2019      	movs	r0, #25
 8000ea2:	f7ff fd9d 	bl	80009e0 <setTimer1>
		}
		if(state == MODE_1){
 8000ea6:	4b3f      	ldr	r3, [pc, #252]	; (8000fa4 <traffic_light_horizontal+0x29c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d168      	bne.n	8000f80 <traffic_light_horizontal+0x278>
			HAL_GPIO_WritePin(GPIOA, PA1_Pin |PA4_Pin | PA2_Pin| PA5_Pin|PA3_Pin | PA6_Pin , SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	217e      	movs	r1, #126	; 0x7e
 8000eb2:	4839      	ldr	r0, [pc, #228]	; (8000f98 <traffic_light_horizontal+0x290>)
 8000eb4:	f000 ff39 	bl	8001d2a <HAL_GPIO_WritePin>
			light_hmode = RED;
 8000eb8:	4b35      	ldr	r3, [pc, #212]	; (8000f90 <traffic_light_horizontal+0x288>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]
			setTimer1(red_counter*1000);
 8000ebe:	4b35      	ldr	r3, [pc, #212]	; (8000f94 <traffic_light_horizontal+0x28c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ec6:	fb02 f303 	mul.w	r3, r2, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fd88 	bl	80009e0 <setTimer1>
		}
		break;
 8000ed0:	e056      	b.n	8000f80 <traffic_light_horizontal+0x278>
	case YELLOW_BLINK:
		if (timer1_flag == 1){
 8000ed2:	4b32      	ldr	r3, [pc, #200]	; (8000f9c <traffic_light_horizontal+0x294>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d106      	bne.n	8000ee8 <traffic_light_horizontal+0x1e0>
			HAL_GPIO_TogglePin(GPIOA, PA2_Pin);
 8000eda:	2104      	movs	r1, #4
 8000edc:	482e      	ldr	r0, [pc, #184]	; (8000f98 <traffic_light_horizontal+0x290>)
 8000ede:	f000 ff3c 	bl	8001d5a <HAL_GPIO_TogglePin>
			setTimer1(25);
 8000ee2:	2019      	movs	r0, #25
 8000ee4:	f7ff fd7c 	bl	80009e0 <setTimer1>
		}
		if(state == MODE_4){
 8000ee8:	4b2e      	ldr	r3, [pc, #184]	; (8000fa4 <traffic_light_horizontal+0x29c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b04      	cmp	r3, #4
 8000eee:	d10a      	bne.n	8000f06 <traffic_light_horizontal+0x1fe>
			HAL_GPIO_WritePin(GPIOA, PA1_Pin |PA4_Pin | PA2_Pin| PA5_Pin|PA3_Pin | PA6_Pin , SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	217e      	movs	r1, #126	; 0x7e
 8000ef4:	4828      	ldr	r0, [pc, #160]	; (8000f98 <traffic_light_horizontal+0x290>)
 8000ef6:	f000 ff18 	bl	8001d2a <HAL_GPIO_WritePin>
			light_hmode = GREEN_BLINK;
 8000efa:	4b25      	ldr	r3, [pc, #148]	; (8000f90 <traffic_light_horizontal+0x288>)
 8000efc:	2206      	movs	r2, #6
 8000efe:	601a      	str	r2, [r3, #0]
			setTimer1(25);
 8000f00:	2019      	movs	r0, #25
 8000f02:	f7ff fd6d 	bl	80009e0 <setTimer1>
		}

		if(state == MODE_1){
 8000f06:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <traffic_light_horizontal+0x29c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d13a      	bne.n	8000f84 <traffic_light_horizontal+0x27c>
			HAL_GPIO_WritePin(GPIOA, PA1_Pin |PA4_Pin | PA2_Pin| PA5_Pin|PA3_Pin | PA6_Pin , SET);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	217e      	movs	r1, #126	; 0x7e
 8000f12:	4821      	ldr	r0, [pc, #132]	; (8000f98 <traffic_light_horizontal+0x290>)
 8000f14:	f000 ff09 	bl	8001d2a <HAL_GPIO_WritePin>
			light_hmode = RED;
 8000f18:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <traffic_light_horizontal+0x288>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	601a      	str	r2, [r3, #0]
			setTimer1(red_counter*1000);
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <traffic_light_horizontal+0x28c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f26:	fb02 f303 	mul.w	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fd58 	bl	80009e0 <setTimer1>
		}
		break;
 8000f30:	e028      	b.n	8000f84 <traffic_light_horizontal+0x27c>
	case GREEN_BLINK:
		if (timer1_flag == 1){
 8000f32:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <traffic_light_horizontal+0x294>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d106      	bne.n	8000f48 <traffic_light_horizontal+0x240>
			HAL_GPIO_TogglePin(GPIOA, PA3_Pin);
 8000f3a:	2108      	movs	r1, #8
 8000f3c:	4816      	ldr	r0, [pc, #88]	; (8000f98 <traffic_light_horizontal+0x290>)
 8000f3e:	f000 ff0c 	bl	8001d5a <HAL_GPIO_TogglePin>
			setTimer1(25);
 8000f42:	2019      	movs	r0, #25
 8000f44:	f7ff fd4c 	bl	80009e0 <setTimer1>
		}
		if(state == MODE_1){
 8000f48:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <traffic_light_horizontal+0x29c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d11b      	bne.n	8000f88 <traffic_light_horizontal+0x280>
			HAL_GPIO_WritePin(GPIOA, PA1_Pin |PA4_Pin | PA2_Pin| PA5_Pin|PA3_Pin | PA6_Pin , SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	217e      	movs	r1, #126	; 0x7e
 8000f54:	4810      	ldr	r0, [pc, #64]	; (8000f98 <traffic_light_horizontal+0x290>)
 8000f56:	f000 fee8 	bl	8001d2a <HAL_GPIO_WritePin>
			light_hmode = RED;
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <traffic_light_horizontal+0x288>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]
			setTimer1(red_counter*1000);
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <traffic_light_horizontal+0x28c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f68:	fb02 f303 	mul.w	r3, r2, r3
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fd37 	bl	80009e0 <setTimer1>
		}

		break;
 8000f72:	e009      	b.n	8000f88 <traffic_light_horizontal+0x280>
		break;
 8000f74:	bf00      	nop
 8000f76:	e008      	b.n	8000f8a <traffic_light_horizontal+0x282>
		break;
 8000f78:	bf00      	nop
 8000f7a:	e006      	b.n	8000f8a <traffic_light_horizontal+0x282>
		break;
 8000f7c:	bf00      	nop
 8000f7e:	e004      	b.n	8000f8a <traffic_light_horizontal+0x282>
		break;
 8000f80:	bf00      	nop
 8000f82:	e002      	b.n	8000f8a <traffic_light_horizontal+0x282>
		break;
 8000f84:	bf00      	nop
 8000f86:	e000      	b.n	8000f8a <traffic_light_horizontal+0x282>
		break;
 8000f88:	bf00      	nop
	}



}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000138 	.word	0x20000138
 8000f94:	20000040 	.word	0x20000040
 8000f98:	40010800 	.word	0x40010800
 8000f9c:	2000010c 	.word	0x2000010c
 8000fa0:	20000044 	.word	0x20000044
 8000fa4:	200000a0 	.word	0x200000a0
 8000fa8:	20000048 	.word	0x20000048

08000fac <traffic_light_vertical>:
void traffic_light_vertical(){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	switch (light_vmode){
 8000fb0:	4ba0      	ldr	r3, [pc, #640]	; (8001234 <traffic_light_vertical+0x288>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b06      	cmp	r3, #6
 8000fb6:	f200 813a 	bhi.w	800122e <traffic_light_vertical+0x282>
 8000fba:	a201      	add	r2, pc, #4	; (adr r2, 8000fc0 <traffic_light_vertical+0x14>)
 8000fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc0:	08000fdd 	.word	0x08000fdd
 8000fc4:	080010b7 	.word	0x080010b7
 8000fc8:	08001057 	.word	0x08001057
 8000fcc:	08000ff7 	.word	0x08000ff7
 8000fd0:	08001117 	.word	0x08001117
 8000fd4:	08001177 	.word	0x08001177
 8000fd8:	080011d7 	.word	0x080011d7
	case 0:
		light_vmode = GREEN;
 8000fdc:	4b95      	ldr	r3, [pc, #596]	; (8001234 <traffic_light_vertical+0x288>)
 8000fde:	2203      	movs	r2, #3
 8000fe0:	601a      	str	r2, [r3, #0]
		setTimer2(green_counter*1000);
 8000fe2:	4b95      	ldr	r3, [pc, #596]	; (8001238 <traffic_light_vertical+0x28c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fea:	fb02 f303 	mul.w	r3, r2, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fd12 	bl	8000a18 <setTimer2>
		break;
 8000ff4:	e11b      	b.n	800122e <traffic_light_vertical+0x282>
	case GREEN:
		//vertical
		HAL_GPIO_WritePin(PA4_GPIO_Port, PA4_Pin, SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2110      	movs	r1, #16
 8000ffa:	4890      	ldr	r0, [pc, #576]	; (800123c <traffic_light_vertical+0x290>)
 8000ffc:	f000 fe95 	bl	8001d2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA5_GPIO_Port, PA5_Pin, SET);
 8001000:	2201      	movs	r2, #1
 8001002:	2120      	movs	r1, #32
 8001004:	488d      	ldr	r0, [pc, #564]	; (800123c <traffic_light_vertical+0x290>)
 8001006:	f000 fe90 	bl	8001d2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA6_GPIO_Port, PA6_Pin, RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2140      	movs	r1, #64	; 0x40
 800100e:	488b      	ldr	r0, [pc, #556]	; (800123c <traffic_light_vertical+0x290>)
 8001010:	f000 fe8b 	bl	8001d2a <HAL_GPIO_WritePin>
		if(timer2_flag == 1){
 8001014:	4b8a      	ldr	r3, [pc, #552]	; (8001240 <traffic_light_vertical+0x294>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d10b      	bne.n	8001034 <traffic_light_vertical+0x88>
			light_vmode = YELLOW;
 800101c:	4b85      	ldr	r3, [pc, #532]	; (8001234 <traffic_light_vertical+0x288>)
 800101e:	2202      	movs	r2, #2
 8001020:	601a      	str	r2, [r3, #0]
			setTimer2(yellow_counter*1000);
 8001022:	4b88      	ldr	r3, [pc, #544]	; (8001244 <traffic_light_vertical+0x298>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800102a:	fb02 f303 	mul.w	r3, r2, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fcf2 	bl	8000a18 <setTimer2>
		}
		if(state == MODE_2){
 8001034:	4b84      	ldr	r3, [pc, #528]	; (8001248 <traffic_light_vertical+0x29c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b02      	cmp	r3, #2
 800103a:	f040 80ed 	bne.w	8001218 <traffic_light_vertical+0x26c>
			HAL_GPIO_WritePin(GPIOA, PA1_Pin |PA4_Pin | PA2_Pin| PA5_Pin|PA3_Pin | PA6_Pin , SET);
 800103e:	2201      	movs	r2, #1
 8001040:	217e      	movs	r1, #126	; 0x7e
 8001042:	487e      	ldr	r0, [pc, #504]	; (800123c <traffic_light_vertical+0x290>)
 8001044:	f000 fe71 	bl	8001d2a <HAL_GPIO_WritePin>

			light_vmode = RED_BLINK;
 8001048:	4b7a      	ldr	r3, [pc, #488]	; (8001234 <traffic_light_vertical+0x288>)
 800104a:	2204      	movs	r2, #4
 800104c:	601a      	str	r2, [r3, #0]
			setTimer2(25);
 800104e:	2019      	movs	r0, #25
 8001050:	f7ff fce2 	bl	8000a18 <setTimer2>
		}
		break;
 8001054:	e0e0      	b.n	8001218 <traffic_light_vertical+0x26c>
		case YELLOW:
		//vertical
		HAL_GPIO_WritePin(PA4_GPIO_Port, PA4_Pin, SET);
 8001056:	2201      	movs	r2, #1
 8001058:	2110      	movs	r1, #16
 800105a:	4878      	ldr	r0, [pc, #480]	; (800123c <traffic_light_vertical+0x290>)
 800105c:	f000 fe65 	bl	8001d2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA5_GPIO_Port, PA5_Pin, RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	2120      	movs	r1, #32
 8001064:	4875      	ldr	r0, [pc, #468]	; (800123c <traffic_light_vertical+0x290>)
 8001066:	f000 fe60 	bl	8001d2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA6_GPIO_Port, PA6_Pin, SET);
 800106a:	2201      	movs	r2, #1
 800106c:	2140      	movs	r1, #64	; 0x40
 800106e:	4873      	ldr	r0, [pc, #460]	; (800123c <traffic_light_vertical+0x290>)
 8001070:	f000 fe5b 	bl	8001d2a <HAL_GPIO_WritePin>
		if(timer2_flag == 1){
 8001074:	4b72      	ldr	r3, [pc, #456]	; (8001240 <traffic_light_vertical+0x294>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d10b      	bne.n	8001094 <traffic_light_vertical+0xe8>
			light_vmode = RED;
 800107c:	4b6d      	ldr	r3, [pc, #436]	; (8001234 <traffic_light_vertical+0x288>)
 800107e:	2201      	movs	r2, #1
 8001080:	601a      	str	r2, [r3, #0]
			setTimer2(red_counter*1000);
 8001082:	4b72      	ldr	r3, [pc, #456]	; (800124c <traffic_light_vertical+0x2a0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800108a:	fb02 f303 	mul.w	r3, r2, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fcc2 	bl	8000a18 <setTimer2>
		}
		if(state == MODE_2){
 8001094:	4b6c      	ldr	r3, [pc, #432]	; (8001248 <traffic_light_vertical+0x29c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b02      	cmp	r3, #2
 800109a:	f040 80bf 	bne.w	800121c <traffic_light_vertical+0x270>
			HAL_GPIO_WritePin(GPIOA, PA1_Pin |PA4_Pin | PA2_Pin| PA5_Pin|PA3_Pin | PA6_Pin , SET);
 800109e:	2201      	movs	r2, #1
 80010a0:	217e      	movs	r1, #126	; 0x7e
 80010a2:	4866      	ldr	r0, [pc, #408]	; (800123c <traffic_light_vertical+0x290>)
 80010a4:	f000 fe41 	bl	8001d2a <HAL_GPIO_WritePin>

			light_vmode = RED_BLINK;
 80010a8:	4b62      	ldr	r3, [pc, #392]	; (8001234 <traffic_light_vertical+0x288>)
 80010aa:	2204      	movs	r2, #4
 80010ac:	601a      	str	r2, [r3, #0]
			setTimer2(25);
 80010ae:	2019      	movs	r0, #25
 80010b0:	f7ff fcb2 	bl	8000a18 <setTimer2>
		}
		break;
 80010b4:	e0b2      	b.n	800121c <traffic_light_vertical+0x270>
		case RED:
		//vertical
		HAL_GPIO_WritePin(PA4_GPIO_Port, PA4_Pin, RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2110      	movs	r1, #16
 80010ba:	4860      	ldr	r0, [pc, #384]	; (800123c <traffic_light_vertical+0x290>)
 80010bc:	f000 fe35 	bl	8001d2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA5_GPIO_Port, PA5_Pin, SET);
 80010c0:	2201      	movs	r2, #1
 80010c2:	2120      	movs	r1, #32
 80010c4:	485d      	ldr	r0, [pc, #372]	; (800123c <traffic_light_vertical+0x290>)
 80010c6:	f000 fe30 	bl	8001d2a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PA6_GPIO_Port, PA6_Pin, SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	2140      	movs	r1, #64	; 0x40
 80010ce:	485b      	ldr	r0, [pc, #364]	; (800123c <traffic_light_vertical+0x290>)
 80010d0:	f000 fe2b 	bl	8001d2a <HAL_GPIO_WritePin>
		if(timer2_flag == 1){
 80010d4:	4b5a      	ldr	r3, [pc, #360]	; (8001240 <traffic_light_vertical+0x294>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d10b      	bne.n	80010f4 <traffic_light_vertical+0x148>
			light_vmode = GREEN;
 80010dc:	4b55      	ldr	r3, [pc, #340]	; (8001234 <traffic_light_vertical+0x288>)
 80010de:	2203      	movs	r2, #3
 80010e0:	601a      	str	r2, [r3, #0]
			setTimer2(green_counter*1000);
 80010e2:	4b55      	ldr	r3, [pc, #340]	; (8001238 <traffic_light_vertical+0x28c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ea:	fb02 f303 	mul.w	r3, r2, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fc92 	bl	8000a18 <setTimer2>
		}
		if(state == MODE_2){
 80010f4:	4b54      	ldr	r3, [pc, #336]	; (8001248 <traffic_light_vertical+0x29c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	f040 8091 	bne.w	8001220 <traffic_light_vertical+0x274>
			HAL_GPIO_WritePin(GPIOA, PA1_Pin |PA4_Pin | PA2_Pin| PA5_Pin|PA3_Pin | PA6_Pin , SET);
 80010fe:	2201      	movs	r2, #1
 8001100:	217e      	movs	r1, #126	; 0x7e
 8001102:	484e      	ldr	r0, [pc, #312]	; (800123c <traffic_light_vertical+0x290>)
 8001104:	f000 fe11 	bl	8001d2a <HAL_GPIO_WritePin>
			light_vmode = RED_BLINK;
 8001108:	4b4a      	ldr	r3, [pc, #296]	; (8001234 <traffic_light_vertical+0x288>)
 800110a:	2204      	movs	r2, #4
 800110c:	601a      	str	r2, [r3, #0]
			setTimer2(25);
 800110e:	2019      	movs	r0, #25
 8001110:	f7ff fc82 	bl	8000a18 <setTimer2>
		}
		break;
 8001114:	e084      	b.n	8001220 <traffic_light_vertical+0x274>
	case RED_BLINK:
		if (timer2_flag == 1){
 8001116:	4b4a      	ldr	r3, [pc, #296]	; (8001240 <traffic_light_vertical+0x294>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d106      	bne.n	800112c <traffic_light_vertical+0x180>
			HAL_GPIO_TogglePin(GPIOA, PA4_Pin);
 800111e:	2110      	movs	r1, #16
 8001120:	4846      	ldr	r0, [pc, #280]	; (800123c <traffic_light_vertical+0x290>)
 8001122:	f000 fe1a 	bl	8001d5a <HAL_GPIO_TogglePin>
			setTimer2(25);
 8001126:	2019      	movs	r0, #25
 8001128:	f7ff fc76 	bl	8000a18 <setTimer2>
		}
		if(state == MODE_3){
 800112c:	4b46      	ldr	r3, [pc, #280]	; (8001248 <traffic_light_vertical+0x29c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b03      	cmp	r3, #3
 8001132:	d10a      	bne.n	800114a <traffic_light_vertical+0x19e>
			HAL_GPIO_WritePin(GPIOA, PA1_Pin |PA4_Pin | PA2_Pin| PA5_Pin|PA3_Pin | PA6_Pin , SET);
 8001134:	2201      	movs	r2, #1
 8001136:	217e      	movs	r1, #126	; 0x7e
 8001138:	4840      	ldr	r0, [pc, #256]	; (800123c <traffic_light_vertical+0x290>)
 800113a:	f000 fdf6 	bl	8001d2a <HAL_GPIO_WritePin>
			light_vmode = YELLOW_BLINK;
 800113e:	4b3d      	ldr	r3, [pc, #244]	; (8001234 <traffic_light_vertical+0x288>)
 8001140:	2205      	movs	r2, #5
 8001142:	601a      	str	r2, [r3, #0]
			setTimer2(25);
 8001144:	2019      	movs	r0, #25
 8001146:	f7ff fc67 	bl	8000a18 <setTimer2>
		}

		if(state == MODE_1){
 800114a:	4b3f      	ldr	r3, [pc, #252]	; (8001248 <traffic_light_vertical+0x29c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d168      	bne.n	8001224 <traffic_light_vertical+0x278>
			HAL_GPIO_WritePin(GPIOA, PA1_Pin |PA4_Pin | PA2_Pin| PA5_Pin|PA3_Pin | PA6_Pin , SET);
 8001152:	2201      	movs	r2, #1
 8001154:	217e      	movs	r1, #126	; 0x7e
 8001156:	4839      	ldr	r0, [pc, #228]	; (800123c <traffic_light_vertical+0x290>)
 8001158:	f000 fde7 	bl	8001d2a <HAL_GPIO_WritePin>
			light_vmode = GREEN;
 800115c:	4b35      	ldr	r3, [pc, #212]	; (8001234 <traffic_light_vertical+0x288>)
 800115e:	2203      	movs	r2, #3
 8001160:	601a      	str	r2, [r3, #0]
			setTimer2(green_counter*1000);
 8001162:	4b35      	ldr	r3, [pc, #212]	; (8001238 <traffic_light_vertical+0x28c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800116a:	fb02 f303 	mul.w	r3, r2, r3
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fc52 	bl	8000a18 <setTimer2>
		}
		break;
 8001174:	e056      	b.n	8001224 <traffic_light_vertical+0x278>
	case YELLOW_BLINK:
		if (timer2_flag == 1){
 8001176:	4b32      	ldr	r3, [pc, #200]	; (8001240 <traffic_light_vertical+0x294>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d106      	bne.n	800118c <traffic_light_vertical+0x1e0>
			HAL_GPIO_TogglePin(GPIOA, PA5_Pin);
 800117e:	2120      	movs	r1, #32
 8001180:	482e      	ldr	r0, [pc, #184]	; (800123c <traffic_light_vertical+0x290>)
 8001182:	f000 fdea 	bl	8001d5a <HAL_GPIO_TogglePin>
			setTimer2(25);
 8001186:	2019      	movs	r0, #25
 8001188:	f7ff fc46 	bl	8000a18 <setTimer2>
		}
		if(state == MODE_4){
 800118c:	4b2e      	ldr	r3, [pc, #184]	; (8001248 <traffic_light_vertical+0x29c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b04      	cmp	r3, #4
 8001192:	d10a      	bne.n	80011aa <traffic_light_vertical+0x1fe>
			HAL_GPIO_WritePin(GPIOA, PA1_Pin |PA4_Pin | PA2_Pin| PA5_Pin|PA3_Pin | PA6_Pin , SET);
 8001194:	2201      	movs	r2, #1
 8001196:	217e      	movs	r1, #126	; 0x7e
 8001198:	4828      	ldr	r0, [pc, #160]	; (800123c <traffic_light_vertical+0x290>)
 800119a:	f000 fdc6 	bl	8001d2a <HAL_GPIO_WritePin>
			light_vmode = GREEN_BLINK;
 800119e:	4b25      	ldr	r3, [pc, #148]	; (8001234 <traffic_light_vertical+0x288>)
 80011a0:	2206      	movs	r2, #6
 80011a2:	601a      	str	r2, [r3, #0]
			setTimer2(25);
 80011a4:	2019      	movs	r0, #25
 80011a6:	f7ff fc37 	bl	8000a18 <setTimer2>
		}
		if(state == MODE_1){
 80011aa:	4b27      	ldr	r3, [pc, #156]	; (8001248 <traffic_light_vertical+0x29c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d13a      	bne.n	8001228 <traffic_light_vertical+0x27c>
			HAL_GPIO_WritePin(GPIOA, PA1_Pin |PA4_Pin | PA2_Pin| PA5_Pin|PA3_Pin | PA6_Pin , SET);
 80011b2:	2201      	movs	r2, #1
 80011b4:	217e      	movs	r1, #126	; 0x7e
 80011b6:	4821      	ldr	r0, [pc, #132]	; (800123c <traffic_light_vertical+0x290>)
 80011b8:	f000 fdb7 	bl	8001d2a <HAL_GPIO_WritePin>
			light_vmode = GREEN;
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <traffic_light_vertical+0x288>)
 80011be:	2203      	movs	r2, #3
 80011c0:	601a      	str	r2, [r3, #0]
			setTimer2(green_counter*1000);
 80011c2:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <traffic_light_vertical+0x28c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011ca:	fb02 f303 	mul.w	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fc22 	bl	8000a18 <setTimer2>
		}
		break;
 80011d4:	e028      	b.n	8001228 <traffic_light_vertical+0x27c>
	case GREEN_BLINK:
		if (timer2_flag == 1){
 80011d6:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <traffic_light_vertical+0x294>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d106      	bne.n	80011ec <traffic_light_vertical+0x240>
			HAL_GPIO_TogglePin(GPIOA, PA6_Pin);
 80011de:	2140      	movs	r1, #64	; 0x40
 80011e0:	4816      	ldr	r0, [pc, #88]	; (800123c <traffic_light_vertical+0x290>)
 80011e2:	f000 fdba 	bl	8001d5a <HAL_GPIO_TogglePin>
			setTimer2(25);
 80011e6:	2019      	movs	r0, #25
 80011e8:	f7ff fc16 	bl	8000a18 <setTimer2>
		}
		if(state == MODE_1){
 80011ec:	4b16      	ldr	r3, [pc, #88]	; (8001248 <traffic_light_vertical+0x29c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d11b      	bne.n	800122c <traffic_light_vertical+0x280>
			HAL_GPIO_WritePin(GPIOA, PA1_Pin |PA4_Pin | PA2_Pin| PA5_Pin|PA3_Pin | PA6_Pin , SET);
 80011f4:	2201      	movs	r2, #1
 80011f6:	217e      	movs	r1, #126	; 0x7e
 80011f8:	4810      	ldr	r0, [pc, #64]	; (800123c <traffic_light_vertical+0x290>)
 80011fa:	f000 fd96 	bl	8001d2a <HAL_GPIO_WritePin>
			light_vmode = GREEN;
 80011fe:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <traffic_light_vertical+0x288>)
 8001200:	2203      	movs	r2, #3
 8001202:	601a      	str	r2, [r3, #0]
			setTimer2(green_counter*1000);
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <traffic_light_vertical+0x28c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800120c:	fb02 f303 	mul.w	r3, r2, r3
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fc01 	bl	8000a18 <setTimer2>
		}

		break;
 8001216:	e009      	b.n	800122c <traffic_light_vertical+0x280>
		break;
 8001218:	bf00      	nop
 800121a:	e008      	b.n	800122e <traffic_light_vertical+0x282>
		break;
 800121c:	bf00      	nop
 800121e:	e006      	b.n	800122e <traffic_light_vertical+0x282>
		break;
 8001220:	bf00      	nop
 8001222:	e004      	b.n	800122e <traffic_light_vertical+0x282>
		break;
 8001224:	bf00      	nop
 8001226:	e002      	b.n	800122e <traffic_light_vertical+0x282>
		break;
 8001228:	bf00      	nop
 800122a:	e000      	b.n	800122e <traffic_light_vertical+0x282>
		break;
 800122c:	bf00      	nop
	}
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000013c 	.word	0x2000013c
 8001238:	20000044 	.word	0x20000044
 800123c:	40010800 	.word	0x40010800
 8001240:	20000114 	.word	0x20000114
 8001244:	20000048 	.word	0x20000048
 8001248:	200000a0 	.word	0x200000a0
 800124c:	20000040 	.word	0x20000040

08001250 <traffic_led7seg>:

void traffic_led7seg(){
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	led7seg_run();
 8001254:	f7ff fa3e 	bl	80006d4 <led7seg_run>
	switch (led_hmode){
 8001258:	4b90      	ldr	r3, [pc, #576]	; (800149c <traffic_led7seg+0x24c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b06      	cmp	r3, #6
 800125e:	f200 80ff 	bhi.w	8001460 <traffic_led7seg+0x210>
 8001262:	a201      	add	r2, pc, #4	; (adr r2, 8001268 <traffic_led7seg+0x18>)
 8001264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001268:	08001285 	.word	0x08001285
 800126c:	08001293 	.word	0x08001293
 8001270:	0800133b 	.word	0x0800133b
 8001274:	080012e7 	.word	0x080012e7
 8001278:	0800138d 	.word	0x0800138d
 800127c:	080013d3 	.word	0x080013d3
 8001280:	08001419 	.word	0x08001419
		case 0:
			led_hmode = RED;
 8001284:	4b85      	ldr	r3, [pc, #532]	; (800149c <traffic_led7seg+0x24c>)
 8001286:	2201      	movs	r2, #1
 8001288:	601a      	str	r2, [r3, #0]
			timer4_flag = 1;
 800128a:	4b85      	ldr	r3, [pc, #532]	; (80014a0 <traffic_led7seg+0x250>)
 800128c:	2201      	movs	r2, #1
 800128e:	601a      	str	r2, [r3, #0]
			break;
 8001290:	e0e6      	b.n	8001460 <traffic_led7seg+0x210>
		case RED:
			if(state == MODE_2){
 8001292:	4b84      	ldr	r3, [pc, #528]	; (80014a4 <traffic_led7seg+0x254>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d105      	bne.n	80012a6 <traffic_led7seg+0x56>
				led_hmode = RED_BLINK;
 800129a:	4b80      	ldr	r3, [pc, #512]	; (800149c <traffic_led7seg+0x24c>)
 800129c:	2204      	movs	r2, #4
 800129e:	601a      	str	r2, [r3, #0]
				setTimer4(100);
 80012a0:	2064      	movs	r0, #100	; 0x64
 80012a2:	f7ff fbe9 	bl	8000a78 <setTimer4>
			}
			if(timer4_flag == 1){
 80012a6:	4b7e      	ldr	r3, [pc, #504]	; (80014a0 <traffic_led7seg+0x250>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	f040 80cd 	bne.w	800144a <traffic_led7seg+0x1fa>
				updateClockBuffer_horizontal(led_hred);
 80012b0:	4b7d      	ldr	r3, [pc, #500]	; (80014a8 <traffic_led7seg+0x258>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f9e9 	bl	800068c <updateClockBuffer_horizontal>
				led_hred--;
 80012ba:	4b7b      	ldr	r3, [pc, #492]	; (80014a8 <traffic_led7seg+0x258>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	3b01      	subs	r3, #1
 80012c0:	4a79      	ldr	r2, [pc, #484]	; (80014a8 <traffic_led7seg+0x258>)
 80012c2:	6013      	str	r3, [r2, #0]
				if(led_hred < 0){
 80012c4:	4b78      	ldr	r3, [pc, #480]	; (80014a8 <traffic_led7seg+0x258>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	da07      	bge.n	80012dc <traffic_led7seg+0x8c>
					led_hred = red_counter;
 80012cc:	4b77      	ldr	r3, [pc, #476]	; (80014ac <traffic_led7seg+0x25c>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a75      	ldr	r2, [pc, #468]	; (80014a8 <traffic_led7seg+0x258>)
 80012d2:	6013      	str	r3, [r2, #0]
					led_hmode = GREEN;
 80012d4:	4b71      	ldr	r3, [pc, #452]	; (800149c <traffic_led7seg+0x24c>)
 80012d6:	2203      	movs	r2, #3
 80012d8:	601a      	str	r2, [r3, #0]
				else{
					setTimer4(1000);
				}

			}
			break;
 80012da:	e0b6      	b.n	800144a <traffic_led7seg+0x1fa>
					setTimer4(1000);
 80012dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012e0:	f7ff fbca 	bl	8000a78 <setTimer4>
			break;
 80012e4:	e0b1      	b.n	800144a <traffic_led7seg+0x1fa>
		case GREEN:
			if(state == MODE_2){
 80012e6:	4b6f      	ldr	r3, [pc, #444]	; (80014a4 <traffic_led7seg+0x254>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d105      	bne.n	80012fa <traffic_led7seg+0xaa>
				led_hmode = RED_BLINK;
 80012ee:	4b6b      	ldr	r3, [pc, #428]	; (800149c <traffic_led7seg+0x24c>)
 80012f0:	2204      	movs	r2, #4
 80012f2:	601a      	str	r2, [r3, #0]
				setTimer4(100);
 80012f4:	2064      	movs	r0, #100	; 0x64
 80012f6:	f7ff fbbf 	bl	8000a78 <setTimer4>
			}
			if(timer4_flag == 1){
 80012fa:	4b69      	ldr	r3, [pc, #420]	; (80014a0 <traffic_led7seg+0x250>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	f040 80a5 	bne.w	800144e <traffic_led7seg+0x1fe>
				updateClockBuffer_horizontal(led_hgreen);
 8001304:	4b6a      	ldr	r3, [pc, #424]	; (80014b0 <traffic_led7seg+0x260>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f9bf 	bl	800068c <updateClockBuffer_horizontal>
				led_hgreen--;
 800130e:	4b68      	ldr	r3, [pc, #416]	; (80014b0 <traffic_led7seg+0x260>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	3b01      	subs	r3, #1
 8001314:	4a66      	ldr	r2, [pc, #408]	; (80014b0 <traffic_led7seg+0x260>)
 8001316:	6013      	str	r3, [r2, #0]
				if(led_hgreen < 0){
 8001318:	4b65      	ldr	r3, [pc, #404]	; (80014b0 <traffic_led7seg+0x260>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	da07      	bge.n	8001330 <traffic_led7seg+0xe0>
					led_hgreen = green_counter;
 8001320:	4b64      	ldr	r3, [pc, #400]	; (80014b4 <traffic_led7seg+0x264>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a62      	ldr	r2, [pc, #392]	; (80014b0 <traffic_led7seg+0x260>)
 8001326:	6013      	str	r3, [r2, #0]
					led_hmode = YELLOW;
 8001328:	4b5c      	ldr	r3, [pc, #368]	; (800149c <traffic_led7seg+0x24c>)
 800132a:	2202      	movs	r2, #2
 800132c:	601a      	str	r2, [r3, #0]
				else{
					setTimer4(1000);
				}

			}
			break;
 800132e:	e08e      	b.n	800144e <traffic_led7seg+0x1fe>
					setTimer4(1000);
 8001330:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001334:	f7ff fba0 	bl	8000a78 <setTimer4>
			break;
 8001338:	e089      	b.n	800144e <traffic_led7seg+0x1fe>
		case YELLOW:
			if(state == MODE_2){
 800133a:	4b5a      	ldr	r3, [pc, #360]	; (80014a4 <traffic_led7seg+0x254>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b02      	cmp	r3, #2
 8001340:	d105      	bne.n	800134e <traffic_led7seg+0xfe>
				led_hmode = RED_BLINK;
 8001342:	4b56      	ldr	r3, [pc, #344]	; (800149c <traffic_led7seg+0x24c>)
 8001344:	2204      	movs	r2, #4
 8001346:	601a      	str	r2, [r3, #0]
				setTimer4(100);
 8001348:	2064      	movs	r0, #100	; 0x64
 800134a:	f7ff fb95 	bl	8000a78 <setTimer4>
			}
			if(timer4_flag == 1){
 800134e:	4b54      	ldr	r3, [pc, #336]	; (80014a0 <traffic_led7seg+0x250>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d17d      	bne.n	8001452 <traffic_led7seg+0x202>
				updateClockBuffer_horizontal(led_hyellow);
 8001356:	4b58      	ldr	r3, [pc, #352]	; (80014b8 <traffic_led7seg+0x268>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f996 	bl	800068c <updateClockBuffer_horizontal>
				led_hyellow--;
 8001360:	4b55      	ldr	r3, [pc, #340]	; (80014b8 <traffic_led7seg+0x268>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	3b01      	subs	r3, #1
 8001366:	4a54      	ldr	r2, [pc, #336]	; (80014b8 <traffic_led7seg+0x268>)
 8001368:	6013      	str	r3, [r2, #0]
				if(led_hyellow < 0){
 800136a:	4b53      	ldr	r3, [pc, #332]	; (80014b8 <traffic_led7seg+0x268>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	da07      	bge.n	8001382 <traffic_led7seg+0x132>
					led_hyellow = yellow_counter;
 8001372:	4b52      	ldr	r3, [pc, #328]	; (80014bc <traffic_led7seg+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a50      	ldr	r2, [pc, #320]	; (80014b8 <traffic_led7seg+0x268>)
 8001378:	6013      	str	r3, [r2, #0]
					led_hmode = RED;
 800137a:	4b48      	ldr	r3, [pc, #288]	; (800149c <traffic_led7seg+0x24c>)
 800137c:	2201      	movs	r2, #1
 800137e:	601a      	str	r2, [r3, #0]
				else{
					setTimer4(1000);
				}

			}
			break;
 8001380:	e067      	b.n	8001452 <traffic_led7seg+0x202>
					setTimer4(1000);
 8001382:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001386:	f7ff fb77 	bl	8000a78 <setTimer4>
			break;
 800138a:	e062      	b.n	8001452 <traffic_led7seg+0x202>
		case RED_BLINK:
			if(timer4_flag == 1){
 800138c:	4b44      	ldr	r3, [pc, #272]	; (80014a0 <traffic_led7seg+0x250>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d105      	bne.n	80013a0 <traffic_led7seg+0x150>
				updateClockBuffer_horizontal(2);
 8001394:	2002      	movs	r0, #2
 8001396:	f7ff f979 	bl	800068c <updateClockBuffer_horizontal>
				setTimer4(100);
 800139a:	2064      	movs	r0, #100	; 0x64
 800139c:	f7ff fb6c 	bl	8000a78 <setTimer4>
			}
			if(state == MODE_3){
 80013a0:	4b40      	ldr	r3, [pc, #256]	; (80014a4 <traffic_led7seg+0x254>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d105      	bne.n	80013b4 <traffic_led7seg+0x164>
				led_hmode = YELLOW_BLINK;
 80013a8:	4b3c      	ldr	r3, [pc, #240]	; (800149c <traffic_led7seg+0x24c>)
 80013aa:	2205      	movs	r2, #5
 80013ac:	601a      	str	r2, [r3, #0]
				setTimer4(100);
 80013ae:	2064      	movs	r0, #100	; 0x64
 80013b0:	f7ff fb62 	bl	8000a78 <setTimer4>
			}
			if(state == MODE_1){
 80013b4:	4b3b      	ldr	r3, [pc, #236]	; (80014a4 <traffic_led7seg+0x254>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d14c      	bne.n	8001456 <traffic_led7seg+0x206>
				led_hmode = RED;
 80013bc:	4b37      	ldr	r3, [pc, #220]	; (800149c <traffic_led7seg+0x24c>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]
				timer4_flag = 1;
 80013c2:	4b37      	ldr	r3, [pc, #220]	; (80014a0 <traffic_led7seg+0x250>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
				led_hred = red_counter;
 80013c8:	4b38      	ldr	r3, [pc, #224]	; (80014ac <traffic_led7seg+0x25c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a36      	ldr	r2, [pc, #216]	; (80014a8 <traffic_led7seg+0x258>)
 80013ce:	6013      	str	r3, [r2, #0]
			}
			break;
 80013d0:	e041      	b.n	8001456 <traffic_led7seg+0x206>
		case YELLOW_BLINK:
			if(timer4_flag == 1){
 80013d2:	4b33      	ldr	r3, [pc, #204]	; (80014a0 <traffic_led7seg+0x250>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d105      	bne.n	80013e6 <traffic_led7seg+0x196>
				updateClockBuffer_horizontal(3);
 80013da:	2003      	movs	r0, #3
 80013dc:	f7ff f956 	bl	800068c <updateClockBuffer_horizontal>
				setTimer4(100);
 80013e0:	2064      	movs	r0, #100	; 0x64
 80013e2:	f7ff fb49 	bl	8000a78 <setTimer4>
			}
			if(state == MODE_4){
 80013e6:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <traffic_led7seg+0x254>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	d105      	bne.n	80013fa <traffic_led7seg+0x1aa>
				led_hmode = GREEN_BLINK;
 80013ee:	4b2b      	ldr	r3, [pc, #172]	; (800149c <traffic_led7seg+0x24c>)
 80013f0:	2206      	movs	r2, #6
 80013f2:	601a      	str	r2, [r3, #0]
				setTimer4(100);
 80013f4:	2064      	movs	r0, #100	; 0x64
 80013f6:	f7ff fb3f 	bl	8000a78 <setTimer4>
			}

			if(state == MODE_1){
 80013fa:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <traffic_led7seg+0x254>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d12b      	bne.n	800145a <traffic_led7seg+0x20a>
				led_hmode = RED;
 8001402:	4b26      	ldr	r3, [pc, #152]	; (800149c <traffic_led7seg+0x24c>)
 8001404:	2201      	movs	r2, #1
 8001406:	601a      	str	r2, [r3, #0]
				timer4_flag = 1;
 8001408:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <traffic_led7seg+0x250>)
 800140a:	2201      	movs	r2, #1
 800140c:	601a      	str	r2, [r3, #0]
				led_hred = red_counter;
 800140e:	4b27      	ldr	r3, [pc, #156]	; (80014ac <traffic_led7seg+0x25c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a25      	ldr	r2, [pc, #148]	; (80014a8 <traffic_led7seg+0x258>)
 8001414:	6013      	str	r3, [r2, #0]
			}
			break;
 8001416:	e020      	b.n	800145a <traffic_led7seg+0x20a>
		case GREEN_BLINK:
			if(timer4_flag == 1){
 8001418:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <traffic_led7seg+0x250>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d105      	bne.n	800142c <traffic_led7seg+0x1dc>
				updateClockBuffer_horizontal(4);
 8001420:	2004      	movs	r0, #4
 8001422:	f7ff f933 	bl	800068c <updateClockBuffer_horizontal>
				setTimer4(100);
 8001426:	2064      	movs	r0, #100	; 0x64
 8001428:	f7ff fb26 	bl	8000a78 <setTimer4>
			}
			if(state == MODE_1){
 800142c:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <traffic_led7seg+0x254>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d114      	bne.n	800145e <traffic_led7seg+0x20e>
				led_hmode = RED;
 8001434:	4b19      	ldr	r3, [pc, #100]	; (800149c <traffic_led7seg+0x24c>)
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]
				timer4_flag = 1;
 800143a:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <traffic_led7seg+0x250>)
 800143c:	2201      	movs	r2, #1
 800143e:	601a      	str	r2, [r3, #0]
				led_hred = red_counter;
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <traffic_led7seg+0x25c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a18      	ldr	r2, [pc, #96]	; (80014a8 <traffic_led7seg+0x258>)
 8001446:	6013      	str	r3, [r2, #0]
			}
			break;
 8001448:	e009      	b.n	800145e <traffic_led7seg+0x20e>
			break;
 800144a:	bf00      	nop
 800144c:	e008      	b.n	8001460 <traffic_led7seg+0x210>
			break;
 800144e:	bf00      	nop
 8001450:	e006      	b.n	8001460 <traffic_led7seg+0x210>
			break;
 8001452:	bf00      	nop
 8001454:	e004      	b.n	8001460 <traffic_led7seg+0x210>
			break;
 8001456:	bf00      	nop
 8001458:	e002      	b.n	8001460 <traffic_led7seg+0x210>
			break;
 800145a:	bf00      	nop
 800145c:	e000      	b.n	8001460 <traffic_led7seg+0x210>
			break;
 800145e:	bf00      	nop
	}

	switch (led_vmode){
 8001460:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <traffic_led7seg+0x270>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b06      	cmp	r3, #6
 8001466:	f200 811d 	bhi.w	80016a4 <traffic_led7seg+0x454>
 800146a:	a201      	add	r2, pc, #4	; (adr r2, 8001470 <traffic_led7seg+0x220>)
 800146c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001470:	0800148d 	.word	0x0800148d
 8001474:	08001571 	.word	0x08001571
 8001478:	0800151d 	.word	0x0800151d
 800147c:	080014c9 	.word	0x080014c9
 8001480:	080015c5 	.word	0x080015c5
 8001484:	0800160f 	.word	0x0800160f
 8001488:	08001659 	.word	0x08001659
		case 0:
			led_vmode = GREEN;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <traffic_led7seg+0x270>)
 800148e:	2203      	movs	r2, #3
 8001490:	601a      	str	r2, [r3, #0]
			timer5_flag = 1;
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <traffic_led7seg+0x274>)
 8001494:	2201      	movs	r2, #1
 8001496:	601a      	str	r2, [r3, #0]
			break;
 8001498:	e104      	b.n	80016a4 <traffic_led7seg+0x454>
 800149a:	bf00      	nop
 800149c:	20000140 	.word	0x20000140
 80014a0:	20000124 	.word	0x20000124
 80014a4:	200000a0 	.word	0x200000a0
 80014a8:	20000058 	.word	0x20000058
 80014ac:	20000040 	.word	0x20000040
 80014b0:	2000005c 	.word	0x2000005c
 80014b4:	20000044 	.word	0x20000044
 80014b8:	20000060 	.word	0x20000060
 80014bc:	20000048 	.word	0x20000048
 80014c0:	20000144 	.word	0x20000144
 80014c4:	2000012c 	.word	0x2000012c
		case GREEN:
			if(state == MODE_2){
 80014c8:	4b77      	ldr	r3, [pc, #476]	; (80016a8 <traffic_led7seg+0x458>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d105      	bne.n	80014dc <traffic_led7seg+0x28c>
				led_vmode = RED_BLINK;
 80014d0:	4b76      	ldr	r3, [pc, #472]	; (80016ac <traffic_led7seg+0x45c>)
 80014d2:	2204      	movs	r2, #4
 80014d4:	601a      	str	r2, [r3, #0]
				setTimer5(100);
 80014d6:	2064      	movs	r0, #100	; 0x64
 80014d8:	f7ff faea 	bl	8000ab0 <setTimer5>
			}
			if(timer5_flag == 1){
 80014dc:	4b74      	ldr	r3, [pc, #464]	; (80016b0 <traffic_led7seg+0x460>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	f040 80d4 	bne.w	800168e <traffic_led7seg+0x43e>
				updateClockBuffer_vertical(led_vgreen);
 80014e6:	4b73      	ldr	r3, [pc, #460]	; (80016b4 <traffic_led7seg+0x464>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f8aa 	bl	8000644 <updateClockBuffer_vertical>
				led_vgreen--;
 80014f0:	4b70      	ldr	r3, [pc, #448]	; (80016b4 <traffic_led7seg+0x464>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	4a6f      	ldr	r2, [pc, #444]	; (80016b4 <traffic_led7seg+0x464>)
 80014f8:	6013      	str	r3, [r2, #0]
				if(led_vgreen < 0){
 80014fa:	4b6e      	ldr	r3, [pc, #440]	; (80016b4 <traffic_led7seg+0x464>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	da07      	bge.n	8001512 <traffic_led7seg+0x2c2>
					led_vgreen = green_counter;
 8001502:	4b6d      	ldr	r3, [pc, #436]	; (80016b8 <traffic_led7seg+0x468>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a6b      	ldr	r2, [pc, #428]	; (80016b4 <traffic_led7seg+0x464>)
 8001508:	6013      	str	r3, [r2, #0]
					led_vmode = 2;
 800150a:	4b68      	ldr	r3, [pc, #416]	; (80016ac <traffic_led7seg+0x45c>)
 800150c:	2202      	movs	r2, #2
 800150e:	601a      	str	r2, [r3, #0]
				}
				else{
					setTimer5(1000);
				}
			}
			break;
 8001510:	e0bd      	b.n	800168e <traffic_led7seg+0x43e>
					setTimer5(1000);
 8001512:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001516:	f7ff facb 	bl	8000ab0 <setTimer5>
			break;
 800151a:	e0b8      	b.n	800168e <traffic_led7seg+0x43e>
		case YELLOW:
			if(state == MODE_2){
 800151c:	4b62      	ldr	r3, [pc, #392]	; (80016a8 <traffic_led7seg+0x458>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d105      	bne.n	8001530 <traffic_led7seg+0x2e0>
				led_vmode = RED_BLINK;
 8001524:	4b61      	ldr	r3, [pc, #388]	; (80016ac <traffic_led7seg+0x45c>)
 8001526:	2204      	movs	r2, #4
 8001528:	601a      	str	r2, [r3, #0]
				setTimer5(100);
 800152a:	2064      	movs	r0, #100	; 0x64
 800152c:	f7ff fac0 	bl	8000ab0 <setTimer5>
			}
			if(timer5_flag == 1){
 8001530:	4b5f      	ldr	r3, [pc, #380]	; (80016b0 <traffic_led7seg+0x460>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b01      	cmp	r3, #1
 8001536:	f040 80ac 	bne.w	8001692 <traffic_led7seg+0x442>
				updateClockBuffer_vertical(led_vyellow);
 800153a:	4b60      	ldr	r3, [pc, #384]	; (80016bc <traffic_led7seg+0x46c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f880 	bl	8000644 <updateClockBuffer_vertical>
				led_vyellow--;
 8001544:	4b5d      	ldr	r3, [pc, #372]	; (80016bc <traffic_led7seg+0x46c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	3b01      	subs	r3, #1
 800154a:	4a5c      	ldr	r2, [pc, #368]	; (80016bc <traffic_led7seg+0x46c>)
 800154c:	6013      	str	r3, [r2, #0]
				if(led_vyellow < 0){
 800154e:	4b5b      	ldr	r3, [pc, #364]	; (80016bc <traffic_led7seg+0x46c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	da07      	bge.n	8001566 <traffic_led7seg+0x316>
					led_vyellow = yellow_counter;
 8001556:	4b5a      	ldr	r3, [pc, #360]	; (80016c0 <traffic_led7seg+0x470>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a58      	ldr	r2, [pc, #352]	; (80016bc <traffic_led7seg+0x46c>)
 800155c:	6013      	str	r3, [r2, #0]
					led_vmode = RED;
 800155e:	4b53      	ldr	r3, [pc, #332]	; (80016ac <traffic_led7seg+0x45c>)
 8001560:	2201      	movs	r2, #1
 8001562:	601a      	str	r2, [r3, #0]
				else{
					setTimer5(1000);
				}

			}
			break;
 8001564:	e095      	b.n	8001692 <traffic_led7seg+0x442>
					setTimer5(1000);
 8001566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800156a:	f7ff faa1 	bl	8000ab0 <setTimer5>
			break;
 800156e:	e090      	b.n	8001692 <traffic_led7seg+0x442>
		case RED:
			if(state == MODE_2){
 8001570:	4b4d      	ldr	r3, [pc, #308]	; (80016a8 <traffic_led7seg+0x458>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b02      	cmp	r3, #2
 8001576:	d105      	bne.n	8001584 <traffic_led7seg+0x334>
				led_vmode = RED_BLINK;
 8001578:	4b4c      	ldr	r3, [pc, #304]	; (80016ac <traffic_led7seg+0x45c>)
 800157a:	2204      	movs	r2, #4
 800157c:	601a      	str	r2, [r3, #0]
				setTimer5(100);
 800157e:	2064      	movs	r0, #100	; 0x64
 8001580:	f7ff fa96 	bl	8000ab0 <setTimer5>
			}
			if(timer5_flag == 1){
 8001584:	4b4a      	ldr	r3, [pc, #296]	; (80016b0 <traffic_led7seg+0x460>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b01      	cmp	r3, #1
 800158a:	f040 8084 	bne.w	8001696 <traffic_led7seg+0x446>
				updateClockBuffer_vertical(led_vred);
 800158e:	4b4d      	ldr	r3, [pc, #308]	; (80016c4 <traffic_led7seg+0x474>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff f856 	bl	8000644 <updateClockBuffer_vertical>
				led_vred--;
 8001598:	4b4a      	ldr	r3, [pc, #296]	; (80016c4 <traffic_led7seg+0x474>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	3b01      	subs	r3, #1
 800159e:	4a49      	ldr	r2, [pc, #292]	; (80016c4 <traffic_led7seg+0x474>)
 80015a0:	6013      	str	r3, [r2, #0]
				if(led_vred < 0){
 80015a2:	4b48      	ldr	r3, [pc, #288]	; (80016c4 <traffic_led7seg+0x474>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	da07      	bge.n	80015ba <traffic_led7seg+0x36a>
					led_vred = red_counter;
 80015aa:	4b47      	ldr	r3, [pc, #284]	; (80016c8 <traffic_led7seg+0x478>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a45      	ldr	r2, [pc, #276]	; (80016c4 <traffic_led7seg+0x474>)
 80015b0:	6013      	str	r3, [r2, #0]
					led_vmode = GREEN;
 80015b2:	4b3e      	ldr	r3, [pc, #248]	; (80016ac <traffic_led7seg+0x45c>)
 80015b4:	2203      	movs	r2, #3
 80015b6:	601a      	str	r2, [r3, #0]
				else{
					setTimer5(1000);
				}

			}
			break;
 80015b8:	e06d      	b.n	8001696 <traffic_led7seg+0x446>
					setTimer5(1000);
 80015ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015be:	f7ff fa77 	bl	8000ab0 <setTimer5>
			break;
 80015c2:	e068      	b.n	8001696 <traffic_led7seg+0x446>
		case RED_BLINK:
			if(timer5_flag == 1){
 80015c4:	4b3a      	ldr	r3, [pc, #232]	; (80016b0 <traffic_led7seg+0x460>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d107      	bne.n	80015dc <traffic_led7seg+0x38c>
				updateClockBuffer_vertical(red_change);
 80015cc:	4b3f      	ldr	r3, [pc, #252]	; (80016cc <traffic_led7seg+0x47c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff f837 	bl	8000644 <updateClockBuffer_vertical>
				setTimer5(100);
 80015d6:	2064      	movs	r0, #100	; 0x64
 80015d8:	f7ff fa6a 	bl	8000ab0 <setTimer5>
			}
			if(state == MODE_3){
 80015dc:	4b32      	ldr	r3, [pc, #200]	; (80016a8 <traffic_led7seg+0x458>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d105      	bne.n	80015f0 <traffic_led7seg+0x3a0>
				led_vmode = YELLOW_BLINK;
 80015e4:	4b31      	ldr	r3, [pc, #196]	; (80016ac <traffic_led7seg+0x45c>)
 80015e6:	2205      	movs	r2, #5
 80015e8:	601a      	str	r2, [r3, #0]
				setTimer5(100);
 80015ea:	2064      	movs	r0, #100	; 0x64
 80015ec:	f7ff fa60 	bl	8000ab0 <setTimer5>
			}

			if(state == MODE_1){
 80015f0:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <traffic_led7seg+0x458>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d150      	bne.n	800169a <traffic_led7seg+0x44a>
				led_vmode = GREEN;
 80015f8:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <traffic_led7seg+0x45c>)
 80015fa:	2203      	movs	r2, #3
 80015fc:	601a      	str	r2, [r3, #0]
				timer5_flag = 1;
 80015fe:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <traffic_led7seg+0x460>)
 8001600:	2201      	movs	r2, #1
 8001602:	601a      	str	r2, [r3, #0]
				led_vgreen = green_counter;
 8001604:	4b2c      	ldr	r3, [pc, #176]	; (80016b8 <traffic_led7seg+0x468>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a2a      	ldr	r2, [pc, #168]	; (80016b4 <traffic_led7seg+0x464>)
 800160a:	6013      	str	r3, [r2, #0]
			}
			break;
 800160c:	e045      	b.n	800169a <traffic_led7seg+0x44a>
		case YELLOW_BLINK:
			if(timer5_flag == 1){
 800160e:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <traffic_led7seg+0x460>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d107      	bne.n	8001626 <traffic_led7seg+0x3d6>
				updateClockBuffer_vertical(yellow_change);
 8001616:	4b2e      	ldr	r3, [pc, #184]	; (80016d0 <traffic_led7seg+0x480>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff f812 	bl	8000644 <updateClockBuffer_vertical>
				setTimer5(100);
 8001620:	2064      	movs	r0, #100	; 0x64
 8001622:	f7ff fa45 	bl	8000ab0 <setTimer5>
			}
			if(state == MODE_4){
 8001626:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <traffic_led7seg+0x458>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2b04      	cmp	r3, #4
 800162c:	d105      	bne.n	800163a <traffic_led7seg+0x3ea>
				led_vmode = GREEN_BLINK;
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <traffic_led7seg+0x45c>)
 8001630:	2206      	movs	r2, #6
 8001632:	601a      	str	r2, [r3, #0]
				setTimer5(100);
 8001634:	2064      	movs	r0, #100	; 0x64
 8001636:	f7ff fa3b 	bl	8000ab0 <setTimer5>
			}

			if(state == MODE_1){
 800163a:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <traffic_led7seg+0x458>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d12d      	bne.n	800169e <traffic_led7seg+0x44e>
				led_vmode = GREEN;
 8001642:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <traffic_led7seg+0x45c>)
 8001644:	2203      	movs	r2, #3
 8001646:	601a      	str	r2, [r3, #0]
				timer5_flag = 1;
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <traffic_led7seg+0x460>)
 800164a:	2201      	movs	r2, #1
 800164c:	601a      	str	r2, [r3, #0]
				led_vgreen = green_counter;
 800164e:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <traffic_led7seg+0x468>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a18      	ldr	r2, [pc, #96]	; (80016b4 <traffic_led7seg+0x464>)
 8001654:	6013      	str	r3, [r2, #0]
			}
			break;
 8001656:	e022      	b.n	800169e <traffic_led7seg+0x44e>
		case GREEN_BLINK:
			if(timer5_flag == 1){
 8001658:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <traffic_led7seg+0x460>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d107      	bne.n	8001670 <traffic_led7seg+0x420>
				updateClockBuffer_vertical(green_change);
 8001660:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <traffic_led7seg+0x484>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe ffed 	bl	8000644 <updateClockBuffer_vertical>
				setTimer5(100);
 800166a:	2064      	movs	r0, #100	; 0x64
 800166c:	f7ff fa20 	bl	8000ab0 <setTimer5>
			}
			if(state == MODE_1){
 8001670:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <traffic_led7seg+0x458>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d114      	bne.n	80016a2 <traffic_led7seg+0x452>
				led_vmode = GREEN;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <traffic_led7seg+0x45c>)
 800167a:	2203      	movs	r2, #3
 800167c:	601a      	str	r2, [r3, #0]
				timer5_flag = 1;
 800167e:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <traffic_led7seg+0x460>)
 8001680:	2201      	movs	r2, #1
 8001682:	601a      	str	r2, [r3, #0]
				led_vgreen = green_counter;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <traffic_led7seg+0x468>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <traffic_led7seg+0x464>)
 800168a:	6013      	str	r3, [r2, #0]
			}

			break;
 800168c:	e009      	b.n	80016a2 <traffic_led7seg+0x452>
			break;
 800168e:	bf00      	nop
 8001690:	e008      	b.n	80016a4 <traffic_led7seg+0x454>
			break;
 8001692:	bf00      	nop
 8001694:	e006      	b.n	80016a4 <traffic_led7seg+0x454>
			break;
 8001696:	bf00      	nop
 8001698:	e004      	b.n	80016a4 <traffic_led7seg+0x454>
			break;
 800169a:	bf00      	nop
 800169c:	e002      	b.n	80016a4 <traffic_led7seg+0x454>
			break;
 800169e:	bf00      	nop
 80016a0:	e000      	b.n	80016a4 <traffic_led7seg+0x454>
			break;
 80016a2:	bf00      	nop
	}
}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200000a0 	.word	0x200000a0
 80016ac:	20000144 	.word	0x20000144
 80016b0:	2000012c 	.word	0x2000012c
 80016b4:	20000068 	.word	0x20000068
 80016b8:	20000044 	.word	0x20000044
 80016bc:	2000006c 	.word	0x2000006c
 80016c0:	20000048 	.word	0x20000048
 80016c4:	20000064 	.word	0x20000064
 80016c8:	20000040 	.word	0x20000040
 80016cc:	2000004c 	.word	0x2000004c
 80016d0:	20000054 	.word	0x20000054
 80016d4:	20000050 	.word	0x20000050

080016d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016d8:	f7ff fb10 	bl	8000cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016dc:	480b      	ldr	r0, [pc, #44]	; (800170c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016de:	490c      	ldr	r1, [pc, #48]	; (8001710 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016e0:	4a0c      	ldr	r2, [pc, #48]	; (8001714 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e4:	e002      	b.n	80016ec <LoopCopyDataInit>

080016e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ea:	3304      	adds	r3, #4

080016ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f0:	d3f9      	bcc.n	80016e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016f2:	4a09      	ldr	r2, [pc, #36]	; (8001718 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016f4:	4c09      	ldr	r4, [pc, #36]	; (800171c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f8:	e001      	b.n	80016fe <LoopFillZerobss>

080016fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016fc:	3204      	adds	r2, #4

080016fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001700:	d3fb      	bcc.n	80016fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001702:	f001 fb09 	bl	8002d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001706:	f7ff f841 	bl	800078c <main>
  bx lr
 800170a:	4770      	bx	lr
  ldr r0, =_sdata
 800170c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001710:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001714:	08002dc0 	.word	0x08002dc0
  ldr r2, =_sbss
 8001718:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800171c:	2000014c 	.word	0x2000014c

08001720 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001720:	e7fe      	b.n	8001720 <ADC1_2_IRQHandler>
	...

08001724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_Init+0x28>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a07      	ldr	r2, [pc, #28]	; (800174c <HAL_Init+0x28>)
 800172e:	f043 0310 	orr.w	r3, r3, #16
 8001732:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001734:	2003      	movs	r0, #3
 8001736:	f000 f923 	bl	8001980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173a:	200f      	movs	r0, #15
 800173c:	f000 f808 	bl	8001750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001740:	f7ff fa64 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40022000 	.word	0x40022000

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_InitTick+0x54>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_InitTick+0x58>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001766:	fbb3 f3f1 	udiv	r3, r3, r1
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f93b 	bl	80019ea <HAL_SYSTICK_Config>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e00e      	b.n	800179c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d80a      	bhi.n	800179a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f000 f903 	bl	8001996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001790:	4a06      	ldr	r2, [pc, #24]	; (80017ac <HAL_InitTick+0x5c>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	2000003c 	.word	0x2000003c
 80017a8:	20000074 	.word	0x20000074
 80017ac:	20000070 	.word	0x20000070

080017b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <HAL_IncTick+0x1c>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HAL_IncTick+0x20>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a03      	ldr	r2, [pc, #12]	; (80017d0 <HAL_IncTick+0x20>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	20000074 	.word	0x20000074
 80017d0:	20000148 	.word	0x20000148

080017d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return uwTick;
 80017d8:	4b02      	ldr	r3, [pc, #8]	; (80017e4 <HAL_GetTick+0x10>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	20000148 	.word	0x20000148

080017e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181a:	4a04      	ldr	r2, [pc, #16]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	60d3      	str	r3, [r2, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <__NVIC_GetPriorityGrouping+0x18>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 0307 	and.w	r3, r3, #7
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	2b00      	cmp	r3, #0
 800185c:	db0b      	blt.n	8001876 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f003 021f 	and.w	r2, r3, #31
 8001864:	4906      	ldr	r1, [pc, #24]	; (8001880 <__NVIC_EnableIRQ+0x34>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	2001      	movs	r0, #1
 800186e:	fa00 f202 	lsl.w	r2, r0, r2
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100

08001884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	6039      	str	r1, [r7, #0]
 800188e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	2b00      	cmp	r3, #0
 8001896:	db0a      	blt.n	80018ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	b2da      	uxtb	r2, r3
 800189c:	490c      	ldr	r1, [pc, #48]	; (80018d0 <__NVIC_SetPriority+0x4c>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	0112      	lsls	r2, r2, #4
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	440b      	add	r3, r1
 80018a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ac:	e00a      	b.n	80018c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4908      	ldr	r1, [pc, #32]	; (80018d4 <__NVIC_SetPriority+0x50>)
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	3b04      	subs	r3, #4
 80018bc:	0112      	lsls	r2, r2, #4
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	440b      	add	r3, r1
 80018c2:	761a      	strb	r2, [r3, #24]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000e100 	.word	0xe000e100
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f1c3 0307 	rsb	r3, r3, #7
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	bf28      	it	cs
 80018f6:	2304      	movcs	r3, #4
 80018f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3304      	adds	r3, #4
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d902      	bls.n	8001908 <NVIC_EncodePriority+0x30>
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3b03      	subs	r3, #3
 8001906:	e000      	b.n	800190a <NVIC_EncodePriority+0x32>
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	f04f 32ff 	mov.w	r2, #4294967295
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43da      	mvns	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	401a      	ands	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001920:	f04f 31ff 	mov.w	r1, #4294967295
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa01 f303 	lsl.w	r3, r1, r3
 800192a:	43d9      	mvns	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	4313      	orrs	r3, r2
         );
}
 8001932:	4618      	mov	r0, r3
 8001934:	3724      	adds	r7, #36	; 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3b01      	subs	r3, #1
 8001948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800194c:	d301      	bcc.n	8001952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194e:	2301      	movs	r3, #1
 8001950:	e00f      	b.n	8001972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <SysTick_Config+0x40>)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3b01      	subs	r3, #1
 8001958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800195a:	210f      	movs	r1, #15
 800195c:	f04f 30ff 	mov.w	r0, #4294967295
 8001960:	f7ff ff90 	bl	8001884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <SysTick_Config+0x40>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196a:	4b04      	ldr	r3, [pc, #16]	; (800197c <SysTick_Config+0x40>)
 800196c:	2207      	movs	r2, #7
 800196e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	e000e010 	.word	0xe000e010

08001980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ff2d 	bl	80017e8 <__NVIC_SetPriorityGrouping>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001996:	b580      	push	{r7, lr}
 8001998:	b086      	sub	sp, #24
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a8:	f7ff ff42 	bl	8001830 <__NVIC_GetPriorityGrouping>
 80019ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	6978      	ldr	r0, [r7, #20]
 80019b4:	f7ff ff90 	bl	80018d8 <NVIC_EncodePriority>
 80019b8:	4602      	mov	r2, r0
 80019ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff5f 	bl	8001884 <__NVIC_SetPriority>
}
 80019c6:	bf00      	nop
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff35 	bl	800184c <__NVIC_EnableIRQ>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ffa2 	bl	800193c <SysTick_Config>
 80019f8:	4603      	mov	r3, r0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b08b      	sub	sp, #44	; 0x2c
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a16:	e161      	b.n	8001cdc <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	f040 8150 	bne.w	8001cd6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	4a97      	ldr	r2, [pc, #604]	; (8001c98 <HAL_GPIO_Init+0x294>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d05e      	beq.n	8001afe <HAL_GPIO_Init+0xfa>
 8001a40:	4a95      	ldr	r2, [pc, #596]	; (8001c98 <HAL_GPIO_Init+0x294>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d875      	bhi.n	8001b32 <HAL_GPIO_Init+0x12e>
 8001a46:	4a95      	ldr	r2, [pc, #596]	; (8001c9c <HAL_GPIO_Init+0x298>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d058      	beq.n	8001afe <HAL_GPIO_Init+0xfa>
 8001a4c:	4a93      	ldr	r2, [pc, #588]	; (8001c9c <HAL_GPIO_Init+0x298>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d86f      	bhi.n	8001b32 <HAL_GPIO_Init+0x12e>
 8001a52:	4a93      	ldr	r2, [pc, #588]	; (8001ca0 <HAL_GPIO_Init+0x29c>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d052      	beq.n	8001afe <HAL_GPIO_Init+0xfa>
 8001a58:	4a91      	ldr	r2, [pc, #580]	; (8001ca0 <HAL_GPIO_Init+0x29c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d869      	bhi.n	8001b32 <HAL_GPIO_Init+0x12e>
 8001a5e:	4a91      	ldr	r2, [pc, #580]	; (8001ca4 <HAL_GPIO_Init+0x2a0>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d04c      	beq.n	8001afe <HAL_GPIO_Init+0xfa>
 8001a64:	4a8f      	ldr	r2, [pc, #572]	; (8001ca4 <HAL_GPIO_Init+0x2a0>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d863      	bhi.n	8001b32 <HAL_GPIO_Init+0x12e>
 8001a6a:	4a8f      	ldr	r2, [pc, #572]	; (8001ca8 <HAL_GPIO_Init+0x2a4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d046      	beq.n	8001afe <HAL_GPIO_Init+0xfa>
 8001a70:	4a8d      	ldr	r2, [pc, #564]	; (8001ca8 <HAL_GPIO_Init+0x2a4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d85d      	bhi.n	8001b32 <HAL_GPIO_Init+0x12e>
 8001a76:	2b12      	cmp	r3, #18
 8001a78:	d82a      	bhi.n	8001ad0 <HAL_GPIO_Init+0xcc>
 8001a7a:	2b12      	cmp	r3, #18
 8001a7c:	d859      	bhi.n	8001b32 <HAL_GPIO_Init+0x12e>
 8001a7e:	a201      	add	r2, pc, #4	; (adr r2, 8001a84 <HAL_GPIO_Init+0x80>)
 8001a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a84:	08001aff 	.word	0x08001aff
 8001a88:	08001ad9 	.word	0x08001ad9
 8001a8c:	08001aeb 	.word	0x08001aeb
 8001a90:	08001b2d 	.word	0x08001b2d
 8001a94:	08001b33 	.word	0x08001b33
 8001a98:	08001b33 	.word	0x08001b33
 8001a9c:	08001b33 	.word	0x08001b33
 8001aa0:	08001b33 	.word	0x08001b33
 8001aa4:	08001b33 	.word	0x08001b33
 8001aa8:	08001b33 	.word	0x08001b33
 8001aac:	08001b33 	.word	0x08001b33
 8001ab0:	08001b33 	.word	0x08001b33
 8001ab4:	08001b33 	.word	0x08001b33
 8001ab8:	08001b33 	.word	0x08001b33
 8001abc:	08001b33 	.word	0x08001b33
 8001ac0:	08001b33 	.word	0x08001b33
 8001ac4:	08001b33 	.word	0x08001b33
 8001ac8:	08001ae1 	.word	0x08001ae1
 8001acc:	08001af5 	.word	0x08001af5
 8001ad0:	4a76      	ldr	r2, [pc, #472]	; (8001cac <HAL_GPIO_Init+0x2a8>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d013      	beq.n	8001afe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ad6:	e02c      	b.n	8001b32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	623b      	str	r3, [r7, #32]
          break;
 8001ade:	e029      	b.n	8001b34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	623b      	str	r3, [r7, #32]
          break;
 8001ae8:	e024      	b.n	8001b34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	3308      	adds	r3, #8
 8001af0:	623b      	str	r3, [r7, #32]
          break;
 8001af2:	e01f      	b.n	8001b34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	330c      	adds	r3, #12
 8001afa:	623b      	str	r3, [r7, #32]
          break;
 8001afc:	e01a      	b.n	8001b34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d102      	bne.n	8001b0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b06:	2304      	movs	r3, #4
 8001b08:	623b      	str	r3, [r7, #32]
          break;
 8001b0a:	e013      	b.n	8001b34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d105      	bne.n	8001b20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b14:	2308      	movs	r3, #8
 8001b16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69fa      	ldr	r2, [r7, #28]
 8001b1c:	611a      	str	r2, [r3, #16]
          break;
 8001b1e:	e009      	b.n	8001b34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b20:	2308      	movs	r3, #8
 8001b22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69fa      	ldr	r2, [r7, #28]
 8001b28:	615a      	str	r2, [r3, #20]
          break;
 8001b2a:	e003      	b.n	8001b34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	623b      	str	r3, [r7, #32]
          break;
 8001b30:	e000      	b.n	8001b34 <HAL_GPIO_Init+0x130>
          break;
 8001b32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	2bff      	cmp	r3, #255	; 0xff
 8001b38:	d801      	bhi.n	8001b3e <HAL_GPIO_Init+0x13a>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	e001      	b.n	8001b42 <HAL_GPIO_Init+0x13e>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3304      	adds	r3, #4
 8001b42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	2bff      	cmp	r3, #255	; 0xff
 8001b48:	d802      	bhi.n	8001b50 <HAL_GPIO_Init+0x14c>
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	e002      	b.n	8001b56 <HAL_GPIO_Init+0x152>
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	3b08      	subs	r3, #8
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	210f      	movs	r1, #15
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	fa01 f303 	lsl.w	r3, r1, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	401a      	ands	r2, r3
 8001b68:	6a39      	ldr	r1, [r7, #32]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b70:	431a      	orrs	r2, r3
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 80a9 	beq.w	8001cd6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b84:	4b4a      	ldr	r3, [pc, #296]	; (8001cb0 <HAL_GPIO_Init+0x2ac>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	4a49      	ldr	r2, [pc, #292]	; (8001cb0 <HAL_GPIO_Init+0x2ac>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6193      	str	r3, [r2, #24]
 8001b90:	4b47      	ldr	r3, [pc, #284]	; (8001cb0 <HAL_GPIO_Init+0x2ac>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b9c:	4a45      	ldr	r2, [pc, #276]	; (8001cb4 <HAL_GPIO_Init+0x2b0>)
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	220f      	movs	r2, #15
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a3d      	ldr	r2, [pc, #244]	; (8001cb8 <HAL_GPIO_Init+0x2b4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d00d      	beq.n	8001be4 <HAL_GPIO_Init+0x1e0>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a3c      	ldr	r2, [pc, #240]	; (8001cbc <HAL_GPIO_Init+0x2b8>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d007      	beq.n	8001be0 <HAL_GPIO_Init+0x1dc>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a3b      	ldr	r2, [pc, #236]	; (8001cc0 <HAL_GPIO_Init+0x2bc>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d101      	bne.n	8001bdc <HAL_GPIO_Init+0x1d8>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	e004      	b.n	8001be6 <HAL_GPIO_Init+0x1e2>
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e002      	b.n	8001be6 <HAL_GPIO_Init+0x1e2>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <HAL_GPIO_Init+0x1e2>
 8001be4:	2300      	movs	r3, #0
 8001be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be8:	f002 0203 	and.w	r2, r2, #3
 8001bec:	0092      	lsls	r2, r2, #2
 8001bee:	4093      	lsls	r3, r2
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bf6:	492f      	ldr	r1, [pc, #188]	; (8001cb4 <HAL_GPIO_Init+0x2b0>)
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	089b      	lsrs	r3, r3, #2
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d006      	beq.n	8001c1e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c10:	4b2c      	ldr	r3, [pc, #176]	; (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	492b      	ldr	r1, [pc, #172]	; (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	608b      	str	r3, [r1, #8]
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c1e:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	43db      	mvns	r3, r3
 8001c26:	4927      	ldr	r1, [pc, #156]	; (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d006      	beq.n	8001c46 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c38:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c3a:	68da      	ldr	r2, [r3, #12]
 8001c3c:	4921      	ldr	r1, [pc, #132]	; (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	60cb      	str	r3, [r1, #12]
 8001c44:	e006      	b.n	8001c54 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c46:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	491d      	ldr	r1, [pc, #116]	; (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d006      	beq.n	8001c6e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c60:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	4917      	ldr	r1, [pc, #92]	; (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	604b      	str	r3, [r1, #4]
 8001c6c:	e006      	b.n	8001c7c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	4913      	ldr	r1, [pc, #76]	; (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d01f      	beq.n	8001cc8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c88:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	490d      	ldr	r1, [pc, #52]	; (8001cc4 <HAL_GPIO_Init+0x2c0>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	600b      	str	r3, [r1, #0]
 8001c94:	e01f      	b.n	8001cd6 <HAL_GPIO_Init+0x2d2>
 8001c96:	bf00      	nop
 8001c98:	10320000 	.word	0x10320000
 8001c9c:	10310000 	.word	0x10310000
 8001ca0:	10220000 	.word	0x10220000
 8001ca4:	10210000 	.word	0x10210000
 8001ca8:	10120000 	.word	0x10120000
 8001cac:	10110000 	.word	0x10110000
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40010000 	.word	0x40010000
 8001cb8:	40010800 	.word	0x40010800
 8001cbc:	40010c00 	.word	0x40010c00
 8001cc0:	40011000 	.word	0x40011000
 8001cc4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_GPIO_Init+0x2f4>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	4909      	ldr	r1, [pc, #36]	; (8001cf8 <HAL_GPIO_Init+0x2f4>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	3301      	adds	r3, #1
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f47f ae96 	bne.w	8001a18 <HAL_GPIO_Init+0x14>
  }
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	372c      	adds	r7, #44	; 0x2c
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	40010400 	.word	0x40010400

08001cfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	887b      	ldrh	r3, [r7, #2]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d002      	beq.n	8001d1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d14:	2301      	movs	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
 8001d18:	e001      	b.n	8001d1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr

08001d2a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	460b      	mov	r3, r1
 8001d34:	807b      	strh	r3, [r7, #2]
 8001d36:	4613      	mov	r3, r2
 8001d38:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d3a:	787b      	ldrb	r3, [r7, #1]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d40:	887a      	ldrh	r2, [r7, #2]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d46:	e003      	b.n	8001d50 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d48:	887b      	ldrh	r3, [r7, #2]
 8001d4a:	041a      	lsls	r2, r3, #16
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	611a      	str	r2, [r3, #16]
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr

08001d5a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b085      	sub	sp, #20
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	460b      	mov	r3, r1
 8001d64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d6c:	887a      	ldrh	r2, [r7, #2]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4013      	ands	r3, r2
 8001d72:	041a      	lsls	r2, r3, #16
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	43d9      	mvns	r1, r3
 8001d78:	887b      	ldrh	r3, [r7, #2]
 8001d7a:	400b      	ands	r3, r1
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	611a      	str	r2, [r3, #16]
}
 8001d82:	bf00      	nop
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr

08001d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e272      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 8087 	beq.w	8001eba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dac:	4b92      	ldr	r3, [pc, #584]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 030c 	and.w	r3, r3, #12
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d00c      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001db8:	4b8f      	ldr	r3, [pc, #572]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 030c 	and.w	r3, r3, #12
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d112      	bne.n	8001dea <HAL_RCC_OscConfig+0x5e>
 8001dc4:	4b8c      	ldr	r3, [pc, #560]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd0:	d10b      	bne.n	8001dea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd2:	4b89      	ldr	r3, [pc, #548]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d06c      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x12c>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d168      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e24c      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df2:	d106      	bne.n	8001e02 <HAL_RCC_OscConfig+0x76>
 8001df4:	4b80      	ldr	r3, [pc, #512]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a7f      	ldr	r2, [pc, #508]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	e02e      	b.n	8001e60 <HAL_RCC_OscConfig+0xd4>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10c      	bne.n	8001e24 <HAL_RCC_OscConfig+0x98>
 8001e0a:	4b7b      	ldr	r3, [pc, #492]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a7a      	ldr	r2, [pc, #488]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	4b78      	ldr	r3, [pc, #480]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a77      	ldr	r2, [pc, #476]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	e01d      	b.n	8001e60 <HAL_RCC_OscConfig+0xd4>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e2c:	d10c      	bne.n	8001e48 <HAL_RCC_OscConfig+0xbc>
 8001e2e:	4b72      	ldr	r3, [pc, #456]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a71      	ldr	r2, [pc, #452]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	4b6f      	ldr	r3, [pc, #444]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a6e      	ldr	r2, [pc, #440]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e00b      	b.n	8001e60 <HAL_RCC_OscConfig+0xd4>
 8001e48:	4b6b      	ldr	r3, [pc, #428]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a6a      	ldr	r2, [pc, #424]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	4b68      	ldr	r3, [pc, #416]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a67      	ldr	r2, [pc, #412]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d013      	beq.n	8001e90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7ff fcb4 	bl	80017d4 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e70:	f7ff fcb0 	bl	80017d4 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b64      	cmp	r3, #100	; 0x64
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e200      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e82:	4b5d      	ldr	r3, [pc, #372]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0xe4>
 8001e8e:	e014      	b.n	8001eba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7ff fca0 	bl	80017d4 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e98:	f7ff fc9c 	bl	80017d4 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	; 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e1ec      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eaa:	4b53      	ldr	r3, [pc, #332]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x10c>
 8001eb6:	e000      	b.n	8001eba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d063      	beq.n	8001f8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ec6:	4b4c      	ldr	r3, [pc, #304]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00b      	beq.n	8001eea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ed2:	4b49      	ldr	r3, [pc, #292]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d11c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x18c>
 8001ede:	4b46      	ldr	r3, [pc, #280]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d116      	bne.n	8001f18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eea:	4b43      	ldr	r3, [pc, #268]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d005      	beq.n	8001f02 <HAL_RCC_OscConfig+0x176>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d001      	beq.n	8001f02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e1c0      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f02:	4b3d      	ldr	r3, [pc, #244]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4939      	ldr	r1, [pc, #228]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f16:	e03a      	b.n	8001f8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d020      	beq.n	8001f62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f20:	4b36      	ldr	r3, [pc, #216]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7ff fc55 	bl	80017d4 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2e:	f7ff fc51 	bl	80017d4 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e1a1      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f40:	4b2d      	ldr	r3, [pc, #180]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d0f0      	beq.n	8001f2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	695b      	ldr	r3, [r3, #20]
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4927      	ldr	r1, [pc, #156]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	600b      	str	r3, [r1, #0]
 8001f60:	e015      	b.n	8001f8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f62:	4b26      	ldr	r3, [pc, #152]	; (8001ffc <HAL_RCC_OscConfig+0x270>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7ff fc34 	bl	80017d4 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f70:	f7ff fc30 	bl	80017d4 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e180      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f82:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d03a      	beq.n	8002010 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d019      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fa2:	4b17      	ldr	r3, [pc, #92]	; (8002000 <HAL_RCC_OscConfig+0x274>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa8:	f7ff fc14 	bl	80017d4 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb0:	f7ff fc10 	bl	80017d4 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e160      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f000 fa9c 	bl	800250c <RCC_Delay>
 8001fd4:	e01c      	b.n	8002010 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <HAL_RCC_OscConfig+0x274>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fdc:	f7ff fbfa 	bl	80017d4 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe2:	e00f      	b.n	8002004 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe4:	f7ff fbf6 	bl	80017d4 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d908      	bls.n	8002004 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e146      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	42420000 	.word	0x42420000
 8002000:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002004:	4b92      	ldr	r3, [pc, #584]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1e9      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80a6 	beq.w	800216a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002022:	4b8b      	ldr	r3, [pc, #556]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10d      	bne.n	800204a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	4b88      	ldr	r3, [pc, #544]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	4a87      	ldr	r2, [pc, #540]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002038:	61d3      	str	r3, [r2, #28]
 800203a:	4b85      	ldr	r3, [pc, #532]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002046:	2301      	movs	r3, #1
 8002048:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204a:	4b82      	ldr	r3, [pc, #520]	; (8002254 <HAL_RCC_OscConfig+0x4c8>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002052:	2b00      	cmp	r3, #0
 8002054:	d118      	bne.n	8002088 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002056:	4b7f      	ldr	r3, [pc, #508]	; (8002254 <HAL_RCC_OscConfig+0x4c8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a7e      	ldr	r2, [pc, #504]	; (8002254 <HAL_RCC_OscConfig+0x4c8>)
 800205c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002062:	f7ff fbb7 	bl	80017d4 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206a:	f7ff fbb3 	bl	80017d4 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b64      	cmp	r3, #100	; 0x64
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e103      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207c:	4b75      	ldr	r3, [pc, #468]	; (8002254 <HAL_RCC_OscConfig+0x4c8>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d106      	bne.n	800209e <HAL_RCC_OscConfig+0x312>
 8002090:	4b6f      	ldr	r3, [pc, #444]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4a6e      	ldr	r2, [pc, #440]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6213      	str	r3, [r2, #32]
 800209c:	e02d      	b.n	80020fa <HAL_RCC_OscConfig+0x36e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x334>
 80020a6:	4b6a      	ldr	r3, [pc, #424]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	4a69      	ldr	r2, [pc, #420]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	6213      	str	r3, [r2, #32]
 80020b2:	4b67      	ldr	r3, [pc, #412]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	4a66      	ldr	r2, [pc, #408]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020b8:	f023 0304 	bic.w	r3, r3, #4
 80020bc:	6213      	str	r3, [r2, #32]
 80020be:	e01c      	b.n	80020fa <HAL_RCC_OscConfig+0x36e>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	2b05      	cmp	r3, #5
 80020c6:	d10c      	bne.n	80020e2 <HAL_RCC_OscConfig+0x356>
 80020c8:	4b61      	ldr	r3, [pc, #388]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	4a60      	ldr	r2, [pc, #384]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020ce:	f043 0304 	orr.w	r3, r3, #4
 80020d2:	6213      	str	r3, [r2, #32]
 80020d4:	4b5e      	ldr	r3, [pc, #376]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4a5d      	ldr	r2, [pc, #372]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6213      	str	r3, [r2, #32]
 80020e0:	e00b      	b.n	80020fa <HAL_RCC_OscConfig+0x36e>
 80020e2:	4b5b      	ldr	r3, [pc, #364]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	4a5a      	ldr	r2, [pc, #360]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	f023 0301 	bic.w	r3, r3, #1
 80020ec:	6213      	str	r3, [r2, #32]
 80020ee:	4b58      	ldr	r3, [pc, #352]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	4a57      	ldr	r2, [pc, #348]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	f023 0304 	bic.w	r3, r3, #4
 80020f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d015      	beq.n	800212e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002102:	f7ff fb67 	bl	80017d4 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002108:	e00a      	b.n	8002120 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210a:	f7ff fb63 	bl	80017d4 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	f241 3288 	movw	r2, #5000	; 0x1388
 8002118:	4293      	cmp	r3, r2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e0b1      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002120:	4b4b      	ldr	r3, [pc, #300]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0ee      	beq.n	800210a <HAL_RCC_OscConfig+0x37e>
 800212c:	e014      	b.n	8002158 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800212e:	f7ff fb51 	bl	80017d4 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002134:	e00a      	b.n	800214c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002136:	f7ff fb4d 	bl	80017d4 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f241 3288 	movw	r2, #5000	; 0x1388
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e09b      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214c:	4b40      	ldr	r3, [pc, #256]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1ee      	bne.n	8002136 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002158:	7dfb      	ldrb	r3, [r7, #23]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d105      	bne.n	800216a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215e:	4b3c      	ldr	r3, [pc, #240]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	4a3b      	ldr	r2, [pc, #236]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002168:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 8087 	beq.w	8002282 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002174:	4b36      	ldr	r3, [pc, #216]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	2b08      	cmp	r3, #8
 800217e:	d061      	beq.n	8002244 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d146      	bne.n	8002216 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002188:	4b33      	ldr	r3, [pc, #204]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218e:	f7ff fb21 	bl	80017d4 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002196:	f7ff fb1d 	bl	80017d4 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e06d      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a8:	4b29      	ldr	r3, [pc, #164]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f0      	bne.n	8002196 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021bc:	d108      	bne.n	80021d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021be:	4b24      	ldr	r3, [pc, #144]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	4921      	ldr	r1, [pc, #132]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021d0:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a19      	ldr	r1, [r3, #32]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	430b      	orrs	r3, r1
 80021e2:	491b      	ldr	r1, [pc, #108]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e8:	4b1b      	ldr	r3, [pc, #108]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ee:	f7ff faf1 	bl	80017d4 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f6:	f7ff faed 	bl	80017d4 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e03d      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x46a>
 8002214:	e035      	b.n	8002282 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <HAL_RCC_OscConfig+0x4cc>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7ff fada 	bl	80017d4 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002224:	f7ff fad6 	bl	80017d4 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e026      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_RCC_OscConfig+0x4c4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x498>
 8002242:	e01e      	b.n	8002282 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d107      	bne.n	800225c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e019      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
 8002250:	40021000 	.word	0x40021000
 8002254:	40007000 	.word	0x40007000
 8002258:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800225c:	4b0b      	ldr	r3, [pc, #44]	; (800228c <HAL_RCC_OscConfig+0x500>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	429a      	cmp	r2, r3
 800226e:	d106      	bne.n	800227e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d001      	beq.n	8002282 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40021000 	.word	0x40021000

08002290 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0d0      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022a4:	4b6a      	ldr	r3, [pc, #424]	; (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d910      	bls.n	80022d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b2:	4b67      	ldr	r3, [pc, #412]	; (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 0207 	bic.w	r2, r3, #7
 80022ba:	4965      	ldr	r1, [pc, #404]	; (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b63      	ldr	r3, [pc, #396]	; (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0b8      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d020      	beq.n	8002322 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022ec:	4b59      	ldr	r3, [pc, #356]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	4a58      	ldr	r2, [pc, #352]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002304:	4b53      	ldr	r3, [pc, #332]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	4a52      	ldr	r2, [pc, #328]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800230e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002310:	4b50      	ldr	r3, [pc, #320]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	494d      	ldr	r1, [pc, #308]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	4313      	orrs	r3, r2
 8002320:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	d040      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d107      	bne.n	8002346 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002336:	4b47      	ldr	r3, [pc, #284]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d115      	bne.n	800236e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e07f      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d107      	bne.n	800235e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234e:	4b41      	ldr	r3, [pc, #260]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d109      	bne.n	800236e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e073      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235e:	4b3d      	ldr	r3, [pc, #244]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e06b      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800236e:	4b39      	ldr	r3, [pc, #228]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f023 0203 	bic.w	r2, r3, #3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4936      	ldr	r1, [pc, #216]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002380:	f7ff fa28 	bl	80017d4 <HAL_GetTick>
 8002384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002386:	e00a      	b.n	800239e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002388:	f7ff fa24 	bl	80017d4 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f241 3288 	movw	r2, #5000	; 0x1388
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e053      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239e:	4b2d      	ldr	r3, [pc, #180]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 020c 	and.w	r2, r3, #12
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d1eb      	bne.n	8002388 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023b0:	4b27      	ldr	r3, [pc, #156]	; (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d210      	bcs.n	80023e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023be:	4b24      	ldr	r3, [pc, #144]	; (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 0207 	bic.w	r2, r3, #7
 80023c6:	4922      	ldr	r1, [pc, #136]	; (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ce:	4b20      	ldr	r3, [pc, #128]	; (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e032      	b.n	8002446 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ec:	4b19      	ldr	r3, [pc, #100]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4916      	ldr	r1, [pc, #88]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d009      	beq.n	800241e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800240a:	4b12      	ldr	r3, [pc, #72]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	490e      	ldr	r1, [pc, #56]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	4313      	orrs	r3, r2
 800241c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800241e:	f000 f821 	bl	8002464 <HAL_RCC_GetSysClockFreq>
 8002422:	4602      	mov	r2, r0
 8002424:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	091b      	lsrs	r3, r3, #4
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	490a      	ldr	r1, [pc, #40]	; (8002458 <HAL_RCC_ClockConfig+0x1c8>)
 8002430:	5ccb      	ldrb	r3, [r1, r3]
 8002432:	fa22 f303 	lsr.w	r3, r2, r3
 8002436:	4a09      	ldr	r2, [pc, #36]	; (800245c <HAL_RCC_ClockConfig+0x1cc>)
 8002438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800243a:	4b09      	ldr	r3, [pc, #36]	; (8002460 <HAL_RCC_ClockConfig+0x1d0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff f986 	bl	8001750 <HAL_InitTick>

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40022000 	.word	0x40022000
 8002454:	40021000 	.word	0x40021000
 8002458:	08002d94 	.word	0x08002d94
 800245c:	2000003c 	.word	0x2000003c
 8002460:	20000070 	.word	0x20000070

08002464 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002464:	b480      	push	{r7}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	2300      	movs	r3, #0
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800247e:	4b1e      	ldr	r3, [pc, #120]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b04      	cmp	r3, #4
 800248c:	d002      	beq.n	8002494 <HAL_RCC_GetSysClockFreq+0x30>
 800248e:	2b08      	cmp	r3, #8
 8002490:	d003      	beq.n	800249a <HAL_RCC_GetSysClockFreq+0x36>
 8002492:	e027      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002494:	4b19      	ldr	r3, [pc, #100]	; (80024fc <HAL_RCC_GetSysClockFreq+0x98>)
 8002496:	613b      	str	r3, [r7, #16]
      break;
 8002498:	e027      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	0c9b      	lsrs	r3, r3, #18
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	4a17      	ldr	r2, [pc, #92]	; (8002500 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024a4:	5cd3      	ldrb	r3, [r2, r3]
 80024a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d010      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	0c5b      	lsrs	r3, r3, #17
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	4a11      	ldr	r2, [pc, #68]	; (8002504 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024be:	5cd3      	ldrb	r3, [r2, r3]
 80024c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a0d      	ldr	r2, [pc, #52]	; (80024fc <HAL_RCC_GetSysClockFreq+0x98>)
 80024c6:	fb03 f202 	mul.w	r2, r3, r2
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	e004      	b.n	80024de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a0c      	ldr	r2, [pc, #48]	; (8002508 <HAL_RCC_GetSysClockFreq+0xa4>)
 80024d8:	fb02 f303 	mul.w	r3, r2, r3
 80024dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	613b      	str	r3, [r7, #16]
      break;
 80024e2:	e002      	b.n	80024ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <HAL_RCC_GetSysClockFreq+0x98>)
 80024e6:	613b      	str	r3, [r7, #16]
      break;
 80024e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ea:	693b      	ldr	r3, [r7, #16]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000
 80024fc:	007a1200 	.word	0x007a1200
 8002500:	08002da4 	.word	0x08002da4
 8002504:	08002db4 	.word	0x08002db4
 8002508:	003d0900 	.word	0x003d0900

0800250c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002514:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <RCC_Delay+0x34>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <RCC_Delay+0x38>)
 800251a:	fba2 2303 	umull	r2, r3, r2, r3
 800251e:	0a5b      	lsrs	r3, r3, #9
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	fb02 f303 	mul.w	r3, r2, r3
 8002526:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002528:	bf00      	nop
  }
  while (Delay --);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1e5a      	subs	r2, r3, #1
 800252e:	60fa      	str	r2, [r7, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f9      	bne.n	8002528 <RCC_Delay+0x1c>
}
 8002534:	bf00      	nop
 8002536:	bf00      	nop
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	2000003c 	.word	0x2000003c
 8002544:	10624dd3 	.word	0x10624dd3

08002548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e041      	b.n	80025de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d106      	bne.n	8002574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7fe fb6e 	bl	8000c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3304      	adds	r3, #4
 8002584:	4619      	mov	r1, r3
 8002586:	4610      	mov	r0, r2
 8002588:	f000 fa6e 	bl	8002a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d001      	beq.n	8002600 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e035      	b.n	800266c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a16      	ldr	r2, [pc, #88]	; (8002678 <HAL_TIM_Base_Start_IT+0x90>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d009      	beq.n	8002636 <HAL_TIM_Base_Start_IT+0x4e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800262a:	d004      	beq.n	8002636 <HAL_TIM_Base_Start_IT+0x4e>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a12      	ldr	r2, [pc, #72]	; (800267c <HAL_TIM_Base_Start_IT+0x94>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d111      	bne.n	800265a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b06      	cmp	r3, #6
 8002646:	d010      	beq.n	800266a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002658:	e007      	b.n	800266a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 0201 	orr.w	r2, r2, #1
 8002668:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40012c00 	.word	0x40012c00
 800267c:	40000400 	.word	0x40000400

08002680 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b02      	cmp	r3, #2
 8002694:	d122      	bne.n	80026dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d11b      	bne.n	80026dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0202 	mvn.w	r2, #2
 80026ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f9b4 	bl	8002a30 <HAL_TIM_IC_CaptureCallback>
 80026c8:	e005      	b.n	80026d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f9a7 	bl	8002a1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f9b6 	bl	8002a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d122      	bne.n	8002730 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d11b      	bne.n	8002730 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f06f 0204 	mvn.w	r2, #4
 8002700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2202      	movs	r2, #2
 8002706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f98a 	bl	8002a30 <HAL_TIM_IC_CaptureCallback>
 800271c:	e005      	b.n	800272a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f97d 	bl	8002a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f98c 	bl	8002a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b08      	cmp	r3, #8
 800273c:	d122      	bne.n	8002784 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b08      	cmp	r3, #8
 800274a:	d11b      	bne.n	8002784 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f06f 0208 	mvn.w	r2, #8
 8002754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2204      	movs	r2, #4
 800275a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f960 	bl	8002a30 <HAL_TIM_IC_CaptureCallback>
 8002770:	e005      	b.n	800277e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f953 	bl	8002a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f962 	bl	8002a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f003 0310 	and.w	r3, r3, #16
 800278e:	2b10      	cmp	r3, #16
 8002790:	d122      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	2b10      	cmp	r3, #16
 800279e:	d11b      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f06f 0210 	mvn.w	r2, #16
 80027a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2208      	movs	r2, #8
 80027ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f936 	bl	8002a30 <HAL_TIM_IC_CaptureCallback>
 80027c4:	e005      	b.n	80027d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f929 	bl	8002a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f938 	bl	8002a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d10e      	bne.n	8002804 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d107      	bne.n	8002804 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f06f 0201 	mvn.w	r2, #1
 80027fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7fe f8c8 	bl	8000994 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280e:	2b80      	cmp	r3, #128	; 0x80
 8002810:	d10e      	bne.n	8002830 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281c:	2b80      	cmp	r3, #128	; 0x80
 800281e:	d107      	bne.n	8002830 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fa6b 	bl	8002d06 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283a:	2b40      	cmp	r3, #64	; 0x40
 800283c:	d10e      	bne.n	800285c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002848:	2b40      	cmp	r3, #64	; 0x40
 800284a:	d107      	bne.n	800285c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f8fc 	bl	8002a54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f003 0320 	and.w	r3, r3, #32
 8002866:	2b20      	cmp	r3, #32
 8002868:	d10e      	bne.n	8002888 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	2b20      	cmp	r3, #32
 8002876:	d107      	bne.n	8002888 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0220 	mvn.w	r2, #32
 8002880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 fa36 	bl	8002cf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_TIM_ConfigClockSource+0x1c>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e0b4      	b.n	8002a16 <HAL_TIM_ConfigClockSource+0x186>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028e4:	d03e      	beq.n	8002964 <HAL_TIM_ConfigClockSource+0xd4>
 80028e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ea:	f200 8087 	bhi.w	80029fc <HAL_TIM_ConfigClockSource+0x16c>
 80028ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028f2:	f000 8086 	beq.w	8002a02 <HAL_TIM_ConfigClockSource+0x172>
 80028f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028fa:	d87f      	bhi.n	80029fc <HAL_TIM_ConfigClockSource+0x16c>
 80028fc:	2b70      	cmp	r3, #112	; 0x70
 80028fe:	d01a      	beq.n	8002936 <HAL_TIM_ConfigClockSource+0xa6>
 8002900:	2b70      	cmp	r3, #112	; 0x70
 8002902:	d87b      	bhi.n	80029fc <HAL_TIM_ConfigClockSource+0x16c>
 8002904:	2b60      	cmp	r3, #96	; 0x60
 8002906:	d050      	beq.n	80029aa <HAL_TIM_ConfigClockSource+0x11a>
 8002908:	2b60      	cmp	r3, #96	; 0x60
 800290a:	d877      	bhi.n	80029fc <HAL_TIM_ConfigClockSource+0x16c>
 800290c:	2b50      	cmp	r3, #80	; 0x50
 800290e:	d03c      	beq.n	800298a <HAL_TIM_ConfigClockSource+0xfa>
 8002910:	2b50      	cmp	r3, #80	; 0x50
 8002912:	d873      	bhi.n	80029fc <HAL_TIM_ConfigClockSource+0x16c>
 8002914:	2b40      	cmp	r3, #64	; 0x40
 8002916:	d058      	beq.n	80029ca <HAL_TIM_ConfigClockSource+0x13a>
 8002918:	2b40      	cmp	r3, #64	; 0x40
 800291a:	d86f      	bhi.n	80029fc <HAL_TIM_ConfigClockSource+0x16c>
 800291c:	2b30      	cmp	r3, #48	; 0x30
 800291e:	d064      	beq.n	80029ea <HAL_TIM_ConfigClockSource+0x15a>
 8002920:	2b30      	cmp	r3, #48	; 0x30
 8002922:	d86b      	bhi.n	80029fc <HAL_TIM_ConfigClockSource+0x16c>
 8002924:	2b20      	cmp	r3, #32
 8002926:	d060      	beq.n	80029ea <HAL_TIM_ConfigClockSource+0x15a>
 8002928:	2b20      	cmp	r3, #32
 800292a:	d867      	bhi.n	80029fc <HAL_TIM_ConfigClockSource+0x16c>
 800292c:	2b00      	cmp	r3, #0
 800292e:	d05c      	beq.n	80029ea <HAL_TIM_ConfigClockSource+0x15a>
 8002930:	2b10      	cmp	r3, #16
 8002932:	d05a      	beq.n	80029ea <HAL_TIM_ConfigClockSource+0x15a>
 8002934:	e062      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6899      	ldr	r1, [r3, #8]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f000 f95e 	bl	8002c06 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002958:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	609a      	str	r2, [r3, #8]
      break;
 8002962:	e04f      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	6899      	ldr	r1, [r3, #8]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f000 f947 	bl	8002c06 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002986:	609a      	str	r2, [r3, #8]
      break;
 8002988:	e03c      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6818      	ldr	r0, [r3, #0]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	6859      	ldr	r1, [r3, #4]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	461a      	mov	r2, r3
 8002998:	f000 f8be 	bl	8002b18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2150      	movs	r1, #80	; 0x50
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 f915 	bl	8002bd2 <TIM_ITRx_SetConfig>
      break;
 80029a8:	e02c      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	6859      	ldr	r1, [r3, #4]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	461a      	mov	r2, r3
 80029b8:	f000 f8dc 	bl	8002b74 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2160      	movs	r1, #96	; 0x60
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 f905 	bl	8002bd2 <TIM_ITRx_SetConfig>
      break;
 80029c8:	e01c      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6818      	ldr	r0, [r3, #0]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	6859      	ldr	r1, [r3, #4]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	461a      	mov	r2, r3
 80029d8:	f000 f89e 	bl	8002b18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2140      	movs	r1, #64	; 0x40
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 f8f5 	bl	8002bd2 <TIM_ITRx_SetConfig>
      break;
 80029e8:	e00c      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4619      	mov	r1, r3
 80029f4:	4610      	mov	r0, r2
 80029f6:	f000 f8ec 	bl	8002bd2 <TIM_ITRx_SetConfig>
      break;
 80029fa:	e003      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002a00:	e000      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr

08002a42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr
	...

08002a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a25      	ldr	r2, [pc, #148]	; (8002b10 <TIM_Base_SetConfig+0xa8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d007      	beq.n	8002a90 <TIM_Base_SetConfig+0x28>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a86:	d003      	beq.n	8002a90 <TIM_Base_SetConfig+0x28>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a22      	ldr	r2, [pc, #136]	; (8002b14 <TIM_Base_SetConfig+0xac>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d108      	bne.n	8002aa2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a1a      	ldr	r2, [pc, #104]	; (8002b10 <TIM_Base_SetConfig+0xa8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d007      	beq.n	8002aba <TIM_Base_SetConfig+0x52>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab0:	d003      	beq.n	8002aba <TIM_Base_SetConfig+0x52>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a17      	ldr	r2, [pc, #92]	; (8002b14 <TIM_Base_SetConfig+0xac>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d108      	bne.n	8002acc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a07      	ldr	r2, [pc, #28]	; (8002b10 <TIM_Base_SetConfig+0xa8>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d103      	bne.n	8002b00 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	615a      	str	r2, [r3, #20]
}
 8002b06:	bf00      	nop
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	40012c00 	.word	0x40012c00
 8002b14:	40000400 	.word	0x40000400

08002b18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b087      	sub	sp, #28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	f023 0201 	bic.w	r2, r3, #1
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f023 030a 	bic.w	r3, r3, #10
 8002b54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	621a      	str	r2, [r3, #32]
}
 8002b6a:	bf00      	nop
 8002b6c:	371c      	adds	r7, #28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	f023 0210 	bic.w	r2, r3, #16
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bb0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	621a      	str	r2, [r3, #32]
}
 8002bc8:	bf00      	nop
 8002bca:	371c      	adds	r7, #28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr

08002bd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b085      	sub	sp, #20
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f043 0307 	orr.w	r3, r3, #7
 8002bf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	609a      	str	r2, [r3, #8]
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr

08002c06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b087      	sub	sp, #28
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	607a      	str	r2, [r7, #4]
 8002c12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	021a      	lsls	r2, r3, #8
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	609a      	str	r2, [r3, #8]
}
 8002c3a:	bf00      	nop
 8002c3c:	371c      	adds	r7, #28
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d101      	bne.n	8002c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e041      	b.n	8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a14      	ldr	r2, [pc, #80]	; (8002cec <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d009      	beq.n	8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca8:	d004      	beq.n	8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a10      	ldr	r2, [pc, #64]	; (8002cf0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d10c      	bne.n	8002cce <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40012c00 	.word	0x40012c00
 8002cf0:	40000400 	.word	0x40000400

08002cf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr

08002d06 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <__libc_init_array>:
 8002d18:	b570      	push	{r4, r5, r6, lr}
 8002d1a:	2600      	movs	r6, #0
 8002d1c:	4d0c      	ldr	r5, [pc, #48]	; (8002d50 <__libc_init_array+0x38>)
 8002d1e:	4c0d      	ldr	r4, [pc, #52]	; (8002d54 <__libc_init_array+0x3c>)
 8002d20:	1b64      	subs	r4, r4, r5
 8002d22:	10a4      	asrs	r4, r4, #2
 8002d24:	42a6      	cmp	r6, r4
 8002d26:	d109      	bne.n	8002d3c <__libc_init_array+0x24>
 8002d28:	f000 f822 	bl	8002d70 <_init>
 8002d2c:	2600      	movs	r6, #0
 8002d2e:	4d0a      	ldr	r5, [pc, #40]	; (8002d58 <__libc_init_array+0x40>)
 8002d30:	4c0a      	ldr	r4, [pc, #40]	; (8002d5c <__libc_init_array+0x44>)
 8002d32:	1b64      	subs	r4, r4, r5
 8002d34:	10a4      	asrs	r4, r4, #2
 8002d36:	42a6      	cmp	r6, r4
 8002d38:	d105      	bne.n	8002d46 <__libc_init_array+0x2e>
 8002d3a:	bd70      	pop	{r4, r5, r6, pc}
 8002d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d40:	4798      	blx	r3
 8002d42:	3601      	adds	r6, #1
 8002d44:	e7ee      	b.n	8002d24 <__libc_init_array+0xc>
 8002d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d4a:	4798      	blx	r3
 8002d4c:	3601      	adds	r6, #1
 8002d4e:	e7f2      	b.n	8002d36 <__libc_init_array+0x1e>
 8002d50:	08002db8 	.word	0x08002db8
 8002d54:	08002db8 	.word	0x08002db8
 8002d58:	08002db8 	.word	0x08002db8
 8002d5c:	08002dbc 	.word	0x08002dbc

08002d60 <memset>:
 8002d60:	4603      	mov	r3, r0
 8002d62:	4402      	add	r2, r0
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d100      	bne.n	8002d6a <memset+0xa>
 8002d68:	4770      	bx	lr
 8002d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d6e:	e7f9      	b.n	8002d64 <memset+0x4>

08002d70 <_init>:
 8002d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d72:	bf00      	nop
 8002d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d76:	bc08      	pop	{r3}
 8002d78:	469e      	mov	lr, r3
 8002d7a:	4770      	bx	lr

08002d7c <_fini>:
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7e:	bf00      	nop
 8002d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d82:	bc08      	pop	{r3}
 8002d84:	469e      	mov	lr, r3
 8002d86:	4770      	bx	lr
